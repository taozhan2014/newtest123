{
  "uri" : "local://xk3IxjDG7t9PrqNzLvWwaA/",
  "name" : "Unit 1: Hello World",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Hello World"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>I hate almost all software. [...] The only software that I like is one that I can easily understand and solves my problems. \n\n<footer>Ryan Dahl, creator of Node.js</footer>\n</blockquote>\n\n<h3>About this Course</h3>\n\n<p>This course, called Course 100, provides a hands-on introduction to ConceptJS by going over various examples. Most sections include step-by-step instructions to build the examples along with videos demonstrating the steps. Some of the ideas presented in the first few examples will get clearer as you go through the later examples. \n\n<p>Course 101 provides a more theoretical and thorough, albeit longer, introduction to ConceptJS. We encourage you to take a look at Course 101 after you are done with this course. \n\n<h3>What is ConceptJS? </h3>\n\n<p>ConceptJS is a radically different way to build web applications. Applications in ConceptJS are modeled as a web of linked &ldquo;concepts&rdquo; that are displayed as web pages. ConceptJS applications are unique in that the code and data behind <em>any</em> page is just a click away from it. \n\n<h4>Differences between ConceptJS and other platforms</h4>\n\n<p>If you are familiar with other frameworks such as NodeJS, Ruby on Rails, or J2EE, you will notice these key differences in ConceptJS: <ul>\n<li><b>There is no local setup: </b> ConceptJS is a fully cloud-hosted development and runtime platform. Once you sign up, you can start building applications directly through the browser. \n<li><b>Developers are users with more permissions: </b> Traditional frameworks assume that developers and users are two completely different groups. A typical application goes through different phases such as building, testing and deployment, in different development and test environments, before it is made accessible to the user. This process is not only inefficient, but also produces applications that are hard to understand, modify and manage. ConceptJS is designed to allow trusted users to understand and change the applications that they use directly through the browser. \n<li><b>There is no separate database: </b> All data is stored in concepts. So there is no need for a separate database as with the other frameworks. By keeping all the data in concepts, we ensure that the applications that you build in ConceptJS can be easily linked to other applications. ConceptJS uses Apache Cassandra and Elastic Search internally.\n</ul>\n\n<hr>\n\n<h3>Hello World, the copy-paste way</h3>\n\n<div class=\"well sidenote\">\n<p><i>Copy-paste, really? </i>Most software frameworks discourage copy-pasting code, but ConceptJS is different. If you want to use a concept, you can download or copy-paste it to your local repository. You aren't copying the entire application &mdash; just that particular concept. With the proper use of &ldquo;lambdas&rdquo;, introduced later in this course, the copied concept will still continue to use the same code as the original one. \n</div>\n\n<p>Now let's get started on a &ldquo;Hello World&rdquo; example. You can follow these steps to create a Hello World concept: <ol>\n<li>Click <a href=\"/viewlocal://_EibsMoJiK9WNKUKqYjgb9/\" target=\"_blank\">this link</a> to view a sample concept. This page will say \"Change this text!\". \n<li>Click the 'Download' link in the footer to get a copy of the concept. Note that you need to sign up to copy concepts to your local repository and play with them. \n<li>Click the 'Show in IDE' link to view the code behind the concept. You will see the Viewer on the left and the Editor on the right side of the browser. \n<li>Change the Concept Name from \"copy of ...\" to \"My First Concept\" in the Editor. \n<li>Click the <tt>page</tt> property and edit the <tt>html</tt> textbox. Change the text from \"Change this text!\" to \"Hello World!\". \n<li>Click the Save button in the top-right of the Editor. \n<li>Click the Refresh icon (<span class=\"fa fa-refresh\"></span>) in the Viewer's header on the left. \n<li>Click the Present icon (<span class=\"fa fa-external-link\"></span>) in the Viewer's header to see the page in the &ldquo;presentation mode&rdquo;. \n</ol>\n\n<p><em>That's it! </em>No setup or installation. No builds, deploys, servers and databases. \n\n<p>The following video demonstrates the above steps. \n\n<hr>\n\n<iframe src=\"//fast.wistia.net/embed/iframe/palt87s0ha?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n\n<hr>\n\n<h3>How it works</h3>\n\n<figure style=\"float: right\" class=\"col-xs-12 col-md-6\">\n<img class=\"img-responsive\" src=\"/resourcelocal://Y8pgVHNQeyBXp4dm4q_MtB/\" alt=\"How the Hello World concept works\" title=\"How the Hello World concept works\"></img>\n<figcaption style=\"text-align: center\">Key ideas in the Hello World example</figcaption>\n</figure>\n\n<p>This example involves three key ideas in the ConceptJS platform: is-a relationships, lambdas/bindings and core concepts. The adjoining figure illustrates how the \"Hello World\" concept works and highlights these three ideas. \n\n<p>The \"Hello World\" concept has one simple property called <tt>page</tt>. Properties can store code and data related to a concept. In this case, the <tt>page</tt> property stores a <em>binding</em> of the \"HTML Page\" concept with the value of html set to \"Hello World\". HTML Page is both a <em>lambda concept</em> and <em>core concept</em>. \n\n<p>Once the page property is created, the \"Hello World\" concept establishes an is-a relationship to its value, i.e., the binding of HTML Page. The platform then understands that the Hello World concept must be rendered as \"&lt;h1&gt;Hello World&lt;/h1&gt;\". \n\n<p>The rest of the section gives you a short overview of the key ideas, viz. is-a relationships, lambdas/bindings and core concepts. \n\n<h4>Is-a relationships</h4>\n\n<p>The is-a relationship is an important feature that lets you <i>assign meaning and behavior</i> to concepts. In traditional frameworks, you would have to write statements such as <tt>console.log(\"Hello World\")</tt> or <tt>out.println(\"Hello World\")</tt> to output the text. The problem with this imperative approach is that the system does not keep track of the module, method or class that prints the \"Hello World\" message. \n\n<p>ConceptJS uses a declarative/semantic approach where the link from the concept to its HTML representation is an explicit is-a relationship. The is-a relationship is defined as follows: \n<blockquote>\nAn is-a relationship from a concept A to a concept B, denoted as A &rarr; B, indicates that everything known about B applies to A. \n</blockquote>\n\n<p>So Lion &rarr; Mammal means that everything known about Mammal applies to Lion. Note that ConceptJS makes no distinction between classes and instances. \n\n<p>A concept can create an is-a relationship to one of its properties, or to a different concept. In this case, the is-a relationship is made to the value of the <tt>page</tt> property which is discussed next. \n\n<h4>Lambdas and bindings</h4>\n\n<p>Lambda concepts are abstract concepts that have one or more lambda properties that must be assigned when initialized. Concepts that don't have lambda properties are called <em>simple concepts</em>. Lambda concepts allow you to create powerful abstractions for computations and data, traditionally modeled as functions, classes, schemas and so on.  \n\n<p>HTML Page is a &ldquo;lambda-concept&rdquo; with one &ldquo;lambda-property&rdquo; called <tt>html</tt>. The <tt>page</tt> property in the Hello World concept <em>binds</em> the HTML Page with the value of <tt>html</tt> set to \"&lt;h1&gt;Hello World&lt;/h1&gt;\". In other words, the <tt>page</tt> property is a concrete instance of the abstract HTML Page concept. \n\n<h4>Core-concepts</h4>\n\n<p>HTML Page is one of a handful of <i>core concepts</i> in the ConceptJS platform. Core concepts allow you to assign behaviors to concepts. Any concept that has an is-a relationship to HTML Page will be shown in the Viewer with the value of the <tt>html</tt> property provided in the binding. \n\n<h3>Hello World from scratch</h3>\n\n<div class=\"well sidenote\">\n<p><i>What's with the page property?</i> The page property creates the binding of the HTML page for the purpose of establishing an is-a relationship to it. The property can be named anything &mdash; foo, bar, baz &mdash; as long as it is used in the is-a relationship. \n</div>\n\n<p>You can follow these steps to create a Hello World concept from scratch: <ol>\n<li>View your first concept in the IDE mode. \n<li>Open the Finder in the IDE by clicking the navigation bar above the Editor. \n<li>Use the Add button on top of the panel listing \"My First Concept\" and select the \"New Blank Concept\" option to create a blank concept. \n<li>Close the Finder by clicking the <span class=\"fa fa-caret-up\"></span> button in the divider between the Finder in the top-right and the Editor in the bottom right. This will shrink the Finder. \n<li>Change the concept name in the Editor from \"Untitled Concept\" to \"My Second Concept\". \n<li>Add a simple property by clicking the Add button next to the \"Simple Properties\" section. \n<li>Enter the name of the property as <tt>page</tt> and select the type as Concept. \n<li>Enter \"HTML page\" into the textbox and select the \"HTML Page\" concept in the <tt>/common/core</tt> module. \n<li>You will be prompted to enter the <tt>html</tt> property. \n<li>You can set it to a String by selecting the <span class=\"conceptjs-font conjs-var-string\"></span> tab and setting the value to \"&lt;h1&gt;Hello World&lt;/h1&gt;\". \n<li>Add an is-a relationship by clicking the Add button next to the \"Is-a relationships\" section. Leave the relationship type as Property, and set the property name to 'page'. \n<li>Save the concept by clicking the Save button in the top-right of the Editor's header. \n<li>Click the <span class=\"fa fa-bars\"></span> menu in the Editor's header, and select \"View\" to open the concept in the Viewer on the left. You should see \"Hello World!\" in the Viewer. \n<li>Click the Present icon (<span class=\"fa fa-external-link\"></span>) in the Viewer to view the page in presentation mode. You should see \"Hello World!\". \n</ol>\n\n<hr>\n\n<iframe src=\"//fast.wistia.net/embed/iframe/j0v0nkdhwx?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Applications in ConceptJS are modeled as a web of linked &ldquo;concepts&rdquo; that are displayed as web pages.\n<li>Developers and end-users can edit any page in the IDE to understand and modify (if permitted) the concept behind that page. \n<li>We created two versions of a Hello World concept -- one using copy-paste and one built from scratch. \n</ul>\n\n<p>In the next unit, we will add a CSS file to the Hello World page. \n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 1
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}