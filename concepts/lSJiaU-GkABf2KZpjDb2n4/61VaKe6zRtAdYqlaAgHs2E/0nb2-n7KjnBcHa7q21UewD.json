{
  "uri" : "local://0nb2-n7KjnBcHa7q21UewD/",
  "name" : "Unit 4: Data fields and templates",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Data fields and templates"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<h3>Adding data fields to the concept</h3>\n\n<div class=\"well sidenote\">\n<em>Rethinking data. </em>The word &ldquo;data&rdquo; is not an integral part of ConceptJS terminology. In traditional systems, data is stored in a separate database layer. So the architect must rely on the constructs within the database such as records, documents and schemas, to contextualize the data. In ConceptJS, data is stored in properties, and the concepts holding those properties provide context and semantics for the data. Because the context and semantics is readily available, we think &ldquo;information&rdquo; is a more suitable term for data stored in ConceptJS. \n</div>\n\n<p>We have created concepts to capture static HTML, CSS and Javascript resources. In this unit, we will add dynamic data elements to the concept and use them to deliver as dynamically generated template-based HTML. \n\n<p>You can follow these steps to add a firstName and lastName to the Hello World concept and use it in the HTML: <ol>\n<li>Open \"My Second Concept\" in the IDE mode. \n<li>Open the concept in the Finder. Select the <span class=\"fa fa-bars\"></span> dropdown menu next to the concept, and choose the \"Copy\" option to concept to the ConceptJS clipboard. \n<li>Use the Add button in the panel with \"My Second Concept\" and select the \"Paste\" option to create a copy of the concept in the same level. \n<li>Change the Concept Name in the Editor from \"copy of My Second Concept\" to \"Hello Jane Doe\". \n<li>Add a simple property called <tt>firstName</tt> with type String and set it to 'Jane'. \n<li>Add another simple property called lastName with type String and set it to 'Doe'. \n<li>Rearrange the properties in the \"Simple Properties\" section using drag-and-drop to define the properties in the following order: <tt>firstName</tt> then <tt>lastName</tt> then <tt>html</tt> and finally <tt>page</tt>. \n<li>Change the <tt>html</tt> property to a Script expression (<span class=\"fa fa-file-code-o\"></span>). The script must return an escaped version of the original string, except that instead of 'World', it must return the first name followed by a space followed by the last name. Here's how the final script would look (... represents existing code): <pre>\nreturn '... \\\n   &lt;h1&gt;Hello ' + firstName + ' ' + lastName + '!&lt;/h1&gt; \\\n   ...';\n</pre>\n<li>Save the changes in the editor. \n<li>Click the <span class=\"fa fa-bars\"></span> icon next to the \"Hello Jane Doe\" concept in the Editor's header, and select the \"View\" option to view your changes. \n<li>You should see an animated version of \"Hello Jane Doe\". \n</ol>\n\n<p>You should end up with something like <a href=\"/ide/conceptjs/default/L0h0opoMYbA_xqoebrLsC6/\" target=\"_blank\">this concept</a>. Note that you can click the download link on the footer if you don't have the time to follow the above steps. \n\n<p>The following video demonstrates the steps outlined above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/8wkugy08h4?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h4>How it works</h4>\n\n<p>The simple properties <tt>firstName</tt> and <tt>lastName</tt> can be accessed in server-side scripts as Javascript variables. We refer to these scripts as server-side scripts because they are evaluated in a ConceptJS server, not the browser. \n\n<p>The expression corresponding to the page's html can be a simple string (<span class=\"fa conceptjs-font conjs-var-string\"></span>), a previously-defined property's value (<span class=\"fa conceptjs-font conjs-var-icon\"></span> <span class=\"fa fa-long-arrow-right\"></span> <span class=\"fa conceptjs-font conjs-var-string\"></span>), or a script (<span class=\"fa fa-file-code-o\"></span> <span class=\"fa fa-long-arrow-right\"></span> <span class=\"fa conceptjs-font conjs-var-string\"></span>). \n\n<p>The following video shows how you can use the debugger to understand and identify errors in server-side scripts. \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/h058y3382j?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Using Mustache.js templates instead of messy scripts</h3>\n\n<p>In the previous example, you probably noticed that the script creating the html looks ugly with HTML and Javascript mixed together. <a href=\"https://github.com/janl/mustache.js\">Mustache.js</a> is a Javascript implementation of the Mustache template system. The purpose of such template systems is to keep the static HTML structure separate from dynamic elements such as the first and last names. \n\n<p>You can modify the \"Hello Jane\" concept to use Mustache using the following steps: <ol>\n<li>Open the \"Hello Jane\" concept from the previous exercise in the IDE Editor. \n<li>Select the <tt>html</tt> property, rename it to <tt>htmlTemplate</tt>, and change it back to a String expression with the unescaped version of the String. Use handlebars to express the placeholders for first and last names as shown below: \n<pre>\n  ...\n  Hello {{firstName}} {{lastName}}!\n</pre>\n<p>This looks a lot cleaner, doesn't it!\n<li>Select the <tt>page</tt> property and change its Concept value to \"Mustache HTML Page\" in the /common/core module. \n<li>Set the <tt>htmlTemplate</tt> binding of the \"Mustache HTML Page\" to the value (<span class=\"fa conceptjs-font conceptjs-var-icon\"></span> <span class=\"fa fa-long-arrow-right\"></span> <span class=\"fa conceptjs-font conjs-var-json\"></span>) of the property <tt>htmlTemplate</tt>. \n<li>Set the <tt>propertyMap</tt> binding of the \"Mustache HTML Page\" to the following script (<span class=\"fa fa-file-code-o\"></span> <span class=\"fa fa-long-arrow-right\"></span> <span class=\"fa conceptjs-font conjs-var-json\"></span>) that returns a JSON object: \n<pre>\n  return {firstName: firstName, lastName: lastName};\n</pre> \n<li>Save the changes in the Editor. \n<li>Refresh the \"Hello Jane Doe\" concept in the Viewer using the <span class=\"fa fa-refresh\"></span> button in the header. \n<li>You should see the same animated Hello Jane Doe. This version however uses the Mustache template system to generate the HTML. \n</ol>\n\n<p>You should end up with something like <a href=\"/ide/conceptjs/default/L0h0opoMYbA_xqoebrLsC6/\" target=\"_blank\">this concept</a>. Note that you can click the download link on the footer if you don't have the time to follow the above steps. \n\n<p>The user-defined concept \"Mustache HTML Template\" uses Mustache to apply the given HTML template with the given JSON properties. You can inspect the Hello Jack concept in the Debugger to see how the template generation works. \n\n<p>The following video demonstrates the steps mentioned above, along with a review of the concept's internals in the Debugger (starting 1:04): \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/lvvsftwl1m?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Data can be stored in simple properties within concepts. \n<li>You can create dynamic HTML pages by calculating the <tt>html</tt> property using a server-side script. \n<li>You can rearrange the order of properties by dragging and dropping them in the IDE Editor. \n<li>Simple properties defined prior to a property's script expression can be accessed as Javascript variables. \n<li>Mustache HTML Page lets you define clean logic-less HTML templates in which the handlebars, i.e., code of the form <tt>{{foo}}</tt> and <tt>{{{bar}}}</tt>, are replaced with values given in a property map. \n</ul>\n\n<p>In the next unit, we will turn the page into a form with the first and last names with jQuery. \n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 4
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}