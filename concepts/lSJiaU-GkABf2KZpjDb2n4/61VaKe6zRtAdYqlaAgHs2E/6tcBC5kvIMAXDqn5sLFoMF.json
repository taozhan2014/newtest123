{
  "uri" : "local://6tcBC5kvIMAXDqn5sLFoMF/",
  "name" : "Unit 2: Adding a CSS resource",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Adding a CSS resource"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<h3>Styling Hello World</h3>\n\n<div class=\"well sidenote\">\n<p><em>Hierarchy of concepts. </em>Concepts are organized in a hierarchy. Your account is created with three repositories named 'default', 'public' and 'private' repositories. You can create more repositories using the Finder. \n\n<p>A repository can have many concepts under it. Similarly, every concept can have zero or more concepts placed under it. You can re-organize the hierarchy of concepts by cut-pasting concepts in the Finder, or editing the parent concept defined in a concept's details. \n</div>\n\n<p>In the previous unit, we created a concept that showed a \"Hello World\" web page. We will now link a CSS to that page using the following steps: <ol>\n<li>Open \"My Second Concept\" in the IDE mode. \n<li>Open the Finder using the navigation bar on the top right. \n<li>Select the Hello World concept in the Finder. \n<li>Use the Add button in the panel to the right of \"My Second Concept\", to add a \"New CSS File\" under that concept. The Finder's layout is based on the <a href=\"http://support.apple.com/en-us/HT201732\">Mac Finder's Column View</a>. When you click a concept, you will see its children on the panel to its right. \n<li>You can edit the CSS concept using the Viewer on the left side of the IDE. \n<li>Set the file name to \"hello-world.css\". \n<li>Enter the following code into the textarea in the Viewer: \n<pre>@import url(http://fonts.googleapis.com/css?family=Roboto:400,100,500,300italic,500italic,700italic,900,300);\n\nh1 {\n  font-size:4em;\n  font-family: \"Roboto\", sans serif;\n  font-weight: 500;\n  text-align: center;\n}\n</pre>\n<li>Save the changes in the Viewer using the Save button in the top-right of the Viewer's header. \n<li>Copy the \"Resource URI\" shown in the Viewer using Ctrl-C (Windows, Linux) or Command-C (Mac). \n<li>Click the <span class=\"fa fa-bars\"></span> button next to \"My Second Concept\" in the Finder, and select the \"Edit\" option from the dropdown. \n<li>Click the <tt>page</tt> property under \"Simple Properties\" in the Editor. This will show an \"Edit Simple Property\" section where you can change the <tt>html</tt> to the following value: \n<pre>\n&lt;head&gt;\n &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"[ENTER RESOURCE URI HERE]\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;/body&gt;\n</pre>\n<li>Make sure that the resource URI has been substituted in the html, and save your changes in the Editor. \n<li>Click the <span class=\"fa fa-bars\"></span> button next to the \"My Second Concept\" in the Editor's header, and select the \"View\" option. You should see the Roboto-formatted version now. \n<li>Click the <span class=\"fa fa-external-link\"></span> button in the Viewer's header to show the Hello World in a new tab. \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/csuvo9sxp6?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>How it works</h3>\n\n<p>The Hello World concept now includes the stylesheet with the given resource URI. You can access <tt>web.conceptjs.com/[RESOURCE URI]</tt> to see how the CSS is delivered. \n\n<h4>Indirect is-a relationships and the debugger</h4>\n\n<div class=\"well sidenote\">\n<p><em>Transitive nature of is-a relationships. </em>Is-a relationships are transitive, i.e., A &rarr; B and B &rarr; C, means that A &rarr; C. The runtime behavior of concepts is mostly governed by such indirect, i.e., transitive, is-a relationships. So when the hello-world.css concept has an is-a relationship to CSS resource, it automatically establishes is-a relationships to core concepts such as Web Resource and Named Concept. \n</div>\n\n<p>How does the platform know that the resource URI maps to the given CSS? For this, you can open the CSS concept in the IDE. You will see that this concept establishes an is-a relationship to a \"CSS Resource\" concept, with the CSS content that you entered in the textbox. But that is not all. \n\n<p>You can use the <span class=\"fa fa-bars\"></span> menu next to the CSS concept to \"Debug\" it. This opens the debugger panel in the bottom right of the IDE. The debugger helps you understand the internals of the CSS Resource binding. Note that the CSS Resource is not a core concept &mdash; it was developed on top of ConceptJS as a user-defined concept. \n\n<p>In the debugger, you will see that the CSS Resource concept establishes is-a relationships to three other concepts. <ol>\n<li>A core concept, called \"Web Resource\", that delivers the CSS content over the resource URI. \n<li>Another core concept, called \"Named Concept\", that takes care of renaming the concept to reflect its fileName. \n<li>A user-defined concept, called \"CSS Resource View\", has an indirect is-a relationship to the HTML page. This generates the user interface that you previously used to enter the CSS content. \n</ol>\n\n<p>The following video shows how you can use the debugger to understand the internals of the CSS resource concept. \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/91j564eip4?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Editing concepts outside the IDE</h3>\n\n<div class=\"well sidenote\">\n<p>There are a couple of interesting analogies to the idea of editing concepts using their own UIs.\n\n<p><i>Manuals. </i> Most hardware devices ship with manuals that describe how you can operate the device. A concept's UI is in some sense an interactive manual that describes what it is, and how you can change its behavior. \n\n<p><i>Meta-programming. </i>Meta-programming is defined in Wikipedia as developing programs that can &ldquo;read, generate, analyse and/or transform other programs, and <em>even modify itself while running</em>&rdquo;. \n</div>\n\n<p>You must have noticed that the UI to enter the CSS content is supported by the CSS resource concept itself. This is a key principle of ConceptJS. We want all concepts in the system to have <em>human-readable forms that are useful and meaningful to the user</em>. With this approach, we can create intuitive interfaces that simplify the development process. \n\n<p>In this case, the user of the CSS resource would want to view and modify the filename and content of the resource. This is exactly what the \"CSS Resource\" delivers through an indirect is-a relationship to the HTML page. So anyone can copy the CSS concept to their own repository, and re-program it through its own UI. \n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Web Resource is a core concept that lets you turn concepts into downloadable resources. \n<li>The Finder supports an Add CSS Resource option that lets you create your own CSS resources. \n<li>CSS resources can be edited in the presentation mode, or using the viewer or editor in the IDE. \n<li>Well-designed concepts should implement user-friendly HTML representations that allow end-users and developers to change key properties in the presentation mode. \n<li>CSS resources can be linked by other concepts using their resource URI, which is formed by '/resource' followed by the concept URI. The easiest way to access the resource URI is to look at the CSS Resource concept in the viewer or in presentation mode. \n</ul>\n\n<p>In the next unit, we will add a Javascript resource to the Hello World page. \n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 2
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}