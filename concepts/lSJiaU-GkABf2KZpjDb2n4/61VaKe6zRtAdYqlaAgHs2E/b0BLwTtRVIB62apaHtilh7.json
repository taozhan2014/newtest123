{
  "uri" : "local://b0BLwTtRVIB62apaHtilh7/",
  "name" : "Unit 10: Sharing and permissions",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Sharing and permissions"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<p>In this unit, we will modify the contacts management app to disable certain features when the user does not have write permissions. We will then see how you can share your repository with other ConceptJS users. Finally, we will turn the contacts management app into a &ldquo;downloadable exhibit&rdquo; that others can use to manage their own contacts. \n\n<h3>Adapting to read-only mode</h3>\n\n<p>The contacts management app, so far, does not check to see if the user has permissions to modify the contacts. So users who don't have write-permissions will be able to click buttons and change fields, but the changes will not be saved. In this section, we will detect the user's permissions and automatically adjust the UI controls to reflect that. \n\n<p>There are two methods to check whether a user can update a concept. The Concept object obtained through <tt>$cjs(\"[URI]\")</tt> supports a <tt>canUpdate()</tt> method that returns a Boolean indicating whether/not the user can update the concept or property identified by the URI. The Knockout observables created using <tt>$cjs.ko()</tt> can be tested using the <tt>ko.isWritableObservable(email)</tt> method to see if the observable can be updated. \n\n<p>You can perform the following steps to ensure that the UI works in read-only mode: <ol>\n<li>Open the \"Custom Contacts Folder\" in the IDE mode. \n<li>Edit the <tt>htmlTemplate</tt> property as shown below. This will disable the Add button if the user does not have write permissions to this concept. \n<pre>\nCHANGE\n  $('#addBtn').click(...);\nTO\n  var enableButton = $cjs('{{{listUri}}}').canUpdate();\n  $('#addBtn').prop('disabled', !enableButton)\n    .click(...);\n</pre>\n<li>Save the changes in the Editor. \n<li>View the \"Custom Contacts Folder\" in a different browser without signing into ConceptJS. The Add button must be disabled now. \n<li>Open the \"Contact View\" in the IDE mode. \n<li>Edit the <tt>htmlTemplate</tt> property and change the <tt>data-bind</tt> attributes to only enable the widget when the property is modifiable. \n<pre>\nCHANGE\n        &lt;input ... data-bind=\"textInput: firstName\"&gt;\n        &lt;input ... data-bind=\"textInput: lastName\"&gt;\n        &lt;input ... data-bind=\"textInput: email\"&gt;\nTO\n        &lt;input ... data-bind=\"textInput: firstName, enable: ko.isWritableObservable(firstName)\"&gt;\n        &lt;input ... data-bind=\"textInput: lastName, enable: ko.isWritableObservable(lastName)\"&gt;\n        &lt;input ... data-bind=\"textInput: email, enable: ko.isWritableObservable(email)\"&gt;\n</pre>\n<li>Add a <tt>data-bind</tt> attribute to the <tt>div</tt> tag with the three buttons to hide the buttons if the user does not have write-permissions. \n<pre>\nCHANGE\n  &lt;div class=\"form-group\"&gt;\nTO\n  &lt;div class=\"form-group\" data-bind=\"visible: ko.isWritableObservable(firstName)\"&gt;\n</pre>\n<li>Save the changes in the Editor. \n<li>View a contact without signing into ConceptJS. The fields must be read-only and the buttons must not be visible. \n</ol>\n\n<p>The following video demonstrates the above steps: \n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/llwogw7rbu?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Giving permissions to other users</h3>\n\n<p>The Settings page allows you to share your repositories with other ConceptJS users. The following video demonstrates how you can share a repository. \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/z3vsnzj6zp?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n</hr>\n\n<h3>Creating exhibits</h3>\n\n<p>In this section, we will turn the contact list concept into an exhibit that others can download and use to manage their own contacts. But first, we need to move all the code in \"Custom Contacts Folder\" to a separate lambda concept. Otherwise, everyone using the application will get their own copy of the code generating the contacts folder. There might be cases where this behavior is desirable as well. \n\n<h4>Moving the contacts folder code to a continuation</h4>\n\n<p>You can follow these steps to remove all the code from the \"Custom Contacts Folder\" to a higher-level lambda concept called \"Contacts Folder\": \n<ol>\n<li>Copy-paste the \"Custom Contacts Folder\" and rename it to \"Contacts Folder\". \n<li>Add a lambda-property to the \"Contacts Folder\" called <tt>model</tt> and set it to Concept of type \"Any Concept\" in the /common/types module. This takes any concept as an input to the continuation. \n<li>Change the <tt>tableJson</tt> script to use the anchor concept instead of the home concept as follows: \n<pre>\nCHANGE\n  var children = home.children();\nTO\n  var children = home.anchor().children();\n</pre>\n<li>Change the <tt>propertyMap</tt> binding inside the <tt>page</tt> property in a similar fashion. \n<li>Save the changes to \"Contacts Folder\". This is now a continuation that any contact folder concept can use to display a list of contacts. \n<li>Edit the \"Custom Contacts Folder\" and remove all its properties and is-a relationships. \n<li>Add an is-a relationship to the concept  \"Contacts Folder\" in your repository. \n<li>Save your changes. \n<li>Open the \"Custom Contacts Folder\" in the Viewer to see that it works as before. \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/1289hr1uk5?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>\n<hr>\n\n<p>The \"Custom Contacts Folder\" is now &ldquo;seed concept&rdquo; for your contacts application. Anyone copying this concept will automatically be able to add, list, modify and delete contacts. \n\n\n<h4>Sharing concepts as exhibits</h4>\n\n<p>You can now follow these steps to let other ConceptJS users make their own copies of the \"Custom Contacts Folder\". \n<ol>\n<li>Open the \"Custom Contacts Folder\" in the Viewer. \n<li>Click the <span class=\"fa fa-bars\"></span> button in the Viewer header and select the Share option. \n<li>You can enter information about the contacts application and save the changes. \n<li>When you visit your public profile, you should see the new exhibit. \n<li>Other users can download this exhibit from your public profile or directly using the \"Download\" link in the footer of the \"Custom Contacts Folder\" page.  \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/41y9ahl4xe?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>\n<hr>\n\n<p>You should end up with a concept like <a href=\"/view/conceptjs/default/2uiNmQKlNP8XR4SsV2aLXF/\">this</a>. Note the Download link in the footer of the page. \n\n<h4>How this works</h4>\n\n<p>The download operation simply makes a copy of the concept referenced in the exhibit and places the copy in the <tt>default</tt> folder of the user. The user can switch to the IDE mode to rename and move the concept to a different location. \n\n<p>Note that there is no code in the downloaded concept. The reason is that we moved the code to a simple concept called \"Contacts Folder\" which is still maintained in your repository. Any changes you make will automatically apply to the downloaded copies. Similarly, any changes you make to the \"Contacts View\" will automatically apply to the contacts created in other repositories. \n\n<h4>Seed concepts</h4>\n\n<p>Although an application is a web of concepts, it is easy to generate the web from one &ldquo;seed&rdquo; concept. In this case, the Custom Contacts List is that seed concept from which the rest of the contacts can be created. In a larger application, the seed concept can be a dashboard with which the user can configure and manage the application. The <tt>$cjs.copy()</tt> method can be used to programmatically set up secondary concepts from the seed concept. \n\n<p>Sometimes, we would like the exhibit to show one application, but the download to copy an empty-version of the same. In this case, you can use the &ldquo;template URI&rdquo; field in the exhibit to enter the URI of the empty seed concept. \n\n<h3>Organic app development</h3>\n\n<p>We started with a couple of contact concepts that were maintained using the IDE, and incrementally added features to their user interfaces so that most management can be done in the presentation mode. By turning the contact list into an exhibit, we have also created a downloadable and upgradeable application that others can use. This <em>organic approach</em> to application development is unique to ConceptJS. \n\n<p>Such an organic approach is possible because the focus of ConceptJS is in modeling information as concepts. In the beginning, the IDE helps with code and data entry. Slowly each concept is enhanced with its own user interfaces, naming systems and semantics, by establishing is-a relationships to lambda concepts. During this process, the information becomes more-and-more user-friendly in the presentation mode, and transforms into an application. The application is complete when you don't need the IDE for end-user and support tasks. \n\n<h3>Wrap up</h3>\n\n<p><ul class=\"recap\">\n<li>The <tt>canUpdate()</tt> method on Concept and Property objects derived using <tt>$cjs(\"...uri...\")</tt> returns whether a concept/property can be updated by the user. The Knockout API <tt>ko.isWriteableObservable</tt> can do the same thing for Knockout observables generated using the <tt>$cjs.ko()</tt> method. \n<li>Repositories can be shared with other ConceptJS users using the Settings menu. \n<li>You can create exhibits for concepts in the IDE. These exhibits can be downloaded and by other ConceptJS users. Typically, an exhibit is the seed concept of an application with which the user can create other concepts. \n</ul>\n\n<p>Please check out our Course 101 for a more thorough and theoretical introduction to ConceptJS. Please send your feedback on this course to info@lambdazen.com. "
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 10
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}