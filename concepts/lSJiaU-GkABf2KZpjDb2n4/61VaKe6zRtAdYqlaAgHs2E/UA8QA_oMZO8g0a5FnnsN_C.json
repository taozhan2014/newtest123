{
  "uri" : "local://UA8QA_oMZO8g0a5FnnsN_C/",
  "name" : "Unit 8: Organizing concepts",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Organizing concepts"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<h3>Aspects of organizing concepts</h3>\n\n<div class=\"well sidenote\">\n<p><em>Categories. </em>As mentioned before, concepts are organized in a hierarchy. In this hierarchy, each concept maintains a String category along with the parent concept. The purpose of the category is to classify the concept's role under the the parent concept. For example, the children of a Contact concept could use categories such as \"address\", \"phone\", \"website\" and so on, to classify the different addresses, phone numbers and websites of a contact. \n\n<p>You can edit the category of a Concept in the &ldquo;Edit Concept Details&rdquo; in the Editor. You can also filter concepts by category in the Finder using the &ldquo;Show all&rdquo; dropdown button in each panel. The ConceptJS API also supports querying children of a concept by their category. \n</div>\n\n<p>In this unit, we will create a very simple contacts management app that illustrates three methods to organize concepts. The first method is to automatically rename concepts to provide a textual summary, using the \"Named Concept\" core concept. The second method is to place concepts inside \"Folder\" concepts. We will finally change the folder to a user-defined concept that lists various contacts and provides methods to add, modify and delete contacts. \n\n<h3>Automatically renaming concepts</h3>\n\n<p>\"Named Concept\" is a core concept that lets you automatically rename a concept based on its properties. You can follow these steps to create a Contact lambda concept and an example contact which automatically renames itself: <ol>\n<li>Copy-paste the Person lambda-concept at the same level.\n<li>Edit the pasted concept and change its name to \"Contact\". \n<li>Add a lambda property called <tt>email</tt> of type String, and mark it as an \"Optional\" property defaulting to an empty string. \n<li>Select the <tt>htmlTemplate</tt> property and edit its contents to add an input field for email, after the last name, as follows: <pre>\n  &lt;div class=\"form-group\"&gt;\n    &lt;label for=\"inputEmail\" class=\"col-sm-2 control-label\"&gt;Email&lt;/label&gt;\n    &lt;div class=\"col-sm-10\"&gt;\n      &lt;input type=\"email\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Enter the email (optional)\" data-bind=\"textInput: email\"&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n</pre> \n<li>Add a simple property called <tt>namedConcept</tt> set to the concept \"Named Concept\". \n<li>Assign the name of the Named Concept as the following Javascript expression (<span class=\"fa fa-code\"></span> <span class=\"fa fa-long-arrow-right\"></span> <span class=\"fa conceptjs-font conjs-var-string\"></span>): \n<pre>\n  return firstName + ' ' + lastName + ' (Person)';\n</pre>\n<li>Add an is-a relationship to the property <tt>namedConcept</tt>. \n<li>Save the changes made to the \"Contact\" lambda-concept in the Editor. You now have a reusable lambda-concept called Contact that shows any first name, last name and email in an editable form, and automatically renames itself to the given name. \n<li>To test the \"Contact\", you can add a blank concept under it in the Finder, and set the new concept's name to \"Example Contact\" in the Editor.  \n<li>Add a simple property called <tt>contact</tt> set to the concept \"Contact\" defined in your repository. \n<li>Assign the three bindings of the Contact (firstName, lastName and email) to some initial values or just empty strings. You can edit them in the Viewer as well. \n<li>Add an is-a relationship in the \"Example Contact\" concept to its property <tt>contact</tt>. \n<li>Open the \"Example Contact\" in the Viewer to enter your contact information, and save the changes using the form's Save button. \n<li>When you refresh the \"Example Contact\" in the Editor, you will see the changes made to the <tt>contact</tt> property's bindings. \n<li>When you refresh the \"Example Contact\" in the Finder, you will see that it has been automatically renamed to your name followed by the string \"(Person)\". \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/shw3eju9ir?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Putting concepts in a Folder</h3>\n\n<p>ConceptJS includes a user-defined lambda concept called \"Folder\". The Folder concept provides an easy way to navigate multiple concepts without using the IDE. \n\n<p>You can follow these steps to manage contacts inside a folder: <ol>\n<li>Open the \"Contact\" lambda concept in the IDE. \n<li>Select the \"Contact\" concept in the Finder and click the Add button in the panel to its right to create a \"New Folder\". The folder will be visible in the Viewer. \n<li>Change the name of the folder in the Viewer from \"Untitled\" to \"Contacts List\". \n<li>Double-click the description to change it to something like \"This folder maintains a list of sample contacts\". \n<li>Save the changes in the Viewer. \n<li>Cut-paste the example contact from the previous exercise as a child of the folder. You can also use drag-and-drop as shown in the video at 0:30. \n<li>You can also copy-paste \"Example Contact\" to create more contacts based. \n<li>Refresh the folder in the viewer to see the child concepts. You can also view the folder in presentation mode. \n<li>Check out the find and sort features in the folder. \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/v2gpfi1t8a?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>\n<hr>\n\n<h3>Creating a Contact List page</h3>\n\n<p>The following video shows how you can adapt code from a lambda-concept used by \"Folder\" called \"HTML Page with Children\", and create a custom folder concept. \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/2c0ngonjhw?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/E-v1.js\"></script>\n<hr>\n\n<p>You can follow these instructions to copy the folder: <ol>\n<li>Click <a target=\"_blank\" href=\"/ide/conceptjs/default/TGWodHqd4l8KZqNCbb-9n7/\">Custom Contact Folder</a> to view the custom contact folder in the IDE mode. \n<li>Open the Finder to view the \"Custom Contact Folder\" concept built by the conceptjs user. \n<li>Copy the \"Custom Contact Folder\" to the ConceptJS clipboard. \n<li>Click the &lt; button in the Finder till you see \"My Repos\" listing your repositories. \n<li>Select the <tt>default</tt> repository and the \"Contact\" concept under it. \n<li>Paste the concept from the clipboard to the panel under the \"Contact\" concept.  \n<li>Rename the pasted concept to \"Custom Contact Folder\" in the Editor, and save the changes. \n<li>Cut-paste the examples contacts listed under \"Contact Folder\" as children of your new \"Custom Contact Folder\". \n</ol>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Concepts that have is-a relationships to \"Named Concept\" are automatically renamed to the <tt>name</tt> property provided in its binding. \n<li>You can use the Finder to add Folder concepts that list children concepts by their name and category.\n<li>The <tt>home.children([optional category])</tt> method returns a list of Concept objects representing the children of the concept. This API can be used by server-side scripts to access properties of the children. \n<li>You can use the expression <tt>$cjs(\"...simple concept URI...\").as(\"...lambda concept URI...\")</tt> to find the is-a relationship from the given simple concept to the given lambda concept. \n</ul>\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 8
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}