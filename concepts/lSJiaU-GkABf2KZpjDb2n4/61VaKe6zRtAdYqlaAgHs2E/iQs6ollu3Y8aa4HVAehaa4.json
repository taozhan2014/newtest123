{
  "uri" : "local://iQs6ollu3Y8aa4HVAehaa4/",
  "name" : "Unit 7: Lambdas and abstraction",
  "category" : "unit",
  "parent" : "local://61VaKe6zRtAdYqlaAgHs2E/",
  "pname" : "Course 100",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Lambdas and abstraction"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>The essence of abstractions is preserving information that is relevant in a given context, and forgetting information that is irrelevant in that context.\n\n<footer>Prof. John V. Guttag, MIT. </footer>\n</blockquote>\n\n<h3>The need for abstraction</h3>\n\n<p>So far, all the concepts we have developed have been simple concepts. Simple concepts are concepts that have no lambda properties. In this unit, we will use &ldquo;lambdas&rdquo; to improve the way the form is implemented. \n\n<p>What is the need for abstraction here? Note that the simple concept \"Knockout Form\" captures the first and last names of a person. Now, if I need to capture the first and last names of another person, I would have to copy-paste the \"Knockout Form\". But this makes a copy of all the scripts that are involved in creating the form. Now, there is no easy way to modify the look and feel of the form across all the copies of this concept. \n\n<p>A different way to look at this issue is that the simple concept called \"Knockout Form\" does too many things. On the one hand, it has a generalizable (abstractable) procedure to convert any first and last name properties to a form. On the other hand, it stores specific first and last names for a given person. The idea behind abstraction here is to separate, or abstract out, the common mechanism with which any first and last name can be shown in the form. \n\n<h3>Person: Our first lambda concept</h3>\n\n<div class=\"well sidenote\"><p>Lambda properties and lambda concepts are inspired by <a href=\"http://en.wikipedia.org/wiki/Lambda_calculus\" target=\"_blank\">lambda calculus</a> &mdash; a mathematical system developed by Alonzo Church in 1936. The basic idea behind lambda calculus is <b>placeholder substitution</b>. \n\n<p>For example, I can write a doubling function in lambda calculus as follows: \n\n<p class=\"text-center\"><b>f = &lambda;x. x + x.</b></p>\n\n<p>In English, this reads: f is set to a function, that given some x, will return x plus x. The process of defining f is called <i>abstraction</i>. \n\n<p>Now we can apply f to 2, written as f(2), to get 4. f(3) = 6, f(4) = 8, and so on. This process is called <i>application</i>, which we refer to as <i>binding</i>. \n</div>\n\n<p>Lambda concepts are concepts that have one or more lambda properties. These lambda properties are assigned to specific values in a process called binding. Let's create a lambda concept called Person to see how lambdas help with abstraction. You can follow these steps to create the lambda-concept: <ol>\n<li>Copy the \"Example Knockout Form\" from the previous exercise to the ConceptJS clipboard using the IDE Finder. \n<li>Paste the concept from the ConceptJS clipboard at the same level, and open it in the Editor. \n<li>Change the concept name from \"copy of Example ...\" to \"Person\". \n<li>In the Editor, remove the <tt>firstName</tt> and <tt>lastName</tt> properties from Person using the <span class=\"fa fa-times-circle-o\"></span> icon next to these properties in the \"Simple Properties\" section. \n<li>Use the Add button next to the \"Lambda Properties\" section to add a lambda property. In the details pane, set the property name to <tt>firstName</tt> and its type to <span class=\"fa conceptjs-font conjs-var-string\"></span> String. This will be a mandatory lambda property. \n<li>Add another lambda property called <tt>lastName</tt> of type String, using a similar procedure. \n<li>Save the changes in the Editor. Your lambda concept is ready! In the next exercise, we will <em>bind</em> this lambda concept. \n</ol>\n\n<p>Person is a lambda-concept or an abstract concept. The definition of Person says that &ldquo;given a firstName and lastName, the property page is calculated as ..., and the concept IS that page&rdquo;. This is an abstraction because it turns the details of any person into a form. \n\n<p>The following video demonstrates the steps outline above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/4g1munehee?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Binding a person</h3>\n\n<p>We will now apply, or bind, the Person to a specific instance, say &ldquo;Alonzo Church&rdquo;. To do this, you can follow this process: <ol>\n<li>Open the Person concept in the IDE and select it in the Finder. \n<li>Add a new blank concept under the Person concept using the \"Add\" button in the panel to its right. \n<li>Edit the blank concept and change its name from \"Untitled Concept\" to \"Example Person\". \n<li>Add a simple property using the Add button next to \"Simple Properties\". Set the name of the property to <tt>person</tt>. Set the type to Concept. Search for \"Person\" in the textbox and select the Person concept in your repository in the drop-down box.  \n<li>You should see the firstName and lastName appear under the concept. \n<li>Select the <tt>firstName</tt> binding and pick its value to be a <span class=\"fa conceptjs-font conjs-var-string\"></span> String. Enter the first name as \"Alonzo\" in the textbox. \n<li>Similarly, set the <tt>lastName</tt> binding to \"Church\". \n<li>Add an is-a relationship using the Add button next to the \"Is-a Relationships\" section. In the details pane, select the relationship type to be a \"Property\" and enter the property name as <tt>person</tt>. This indicates that \"Example Person\" <em>is a</em> Binding of \"Person\" with first name Alonzo and last name Church. \n<li>Open the concept in the Viewer to see the form with first and last names. You can make changes to the form and see them applied back to the bindings in the <tt>person</tt> property. \n</ol>\n\n<p>The following video demonstrates the steps outlined above and also summarizes how the binding and field updates work. \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/7ap4zh6k23?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<p>You can refer to the linked <a href=\"/ide/conceptjs/default/TrBtPTcb51AT_aIGbN4C65/\">Example Person</a> and <a href=\"/ide/conceptjs/default/ma1X1_6lli996KkbyAn3o9/\">Person</a> concepts, if you don't have time to go over the steps. \n\n<h3>How it works</h3>\n\n<p>The Example Person concept first creates a property called person which binds the Person lambda concept with the given first and last names. Then, it establishes an is-a relationship to that person. By doing so, all the indirect is-a relationships, including the one to HTML page, take effect on the example person. You can view the example person in the Debugger to understand how this concept is evaluated. \n\n<p>Note that the URI passed into the HTML template is to the person property, not the example concept itself. Specifically, <tt>home.uri()</tt> evaluates to the URI of the example person concept, also called the <i>anchor concept</i>, followed by the variable <tt>person</tt>. When the updates are made to the lambda-properties, the ConceptJS platform tracks down the <i>source</i> of the lambda-property which is found in the example concept itself. To summarize, you can build generic user interfaces in lambda-concepts and let the system figure out the source of the values that the UI updates. \n\n<h3>Copy-paste with lambdas</h3>\n\n<p>An interesting outcome of refactoring the \"Knockout Form\" into a Person lambda-concept and an example person concept is that you can now copy-paste the example without copying the code. In other words, there is only one copy of the code that creates the form in the \"Person\" lambda-concept, which is referred to by all instances of \"Person\". \n\n<p>You can follow these steps to make the copies: <ol>\n<li>Copy-paste the Example Person concept in the Finder at the same level. \n<li>Edit the pasted concept and change the name of the concept to \"Another Example Person\". \n<li>Open \"Another Example Person\" concept in the Viewer. \n<li>Use the form to change first and last names to your name. \n<li>Click the \"Save\" button at the end of the form. You now have two bindings to the same \"Person\" lambda concept. \n</ol>\n\n<p>The following video demonstrates the steps outlined above: \n\n<hr>\n<iframe src=\"//fast.wistia.net/embed/iframe/yxxblq786l?videoFoam=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"463\"></iframe><script src=\"//fast.wistia.net/assets/external/iframe-api-v1.js\"></script>\n<hr>\n\n<h3>Recap</h3>\n\n<p><ul class=\"recap\">\n<li>Lambda concepts are concepts with one or more lambda properties.\n<li>Bindings of lambda concepts assign the lambda properties to specific values. \n<li>Using lambdas and bindings, you can abstract out common code and structure using lambda concepts, and apply the code and structure to specific bindings inside simple concepts. \n<li>The is-a relationships defined in a lambda-concept automatically apply to its bindings as indirect is-a relationships. This is how simple concepts inherit behaviors and semantics from lambda concepts. \n</ul>\n\n<p>Please refer to Course 101 for a more formal treatment of lambdas and bindings. In the next unit, we will look at how simple concepts can be automatically named and organized in folders and tables. \n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 7
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}