{
  "uri" : "local://GPy4iVd5Sa9mDaKuv8WJd9/",
  "name" : "Unit 7: Query APIs",
  "category" : "unit",
  "parent" : "local://hACVdZ_UjR8O1KZxTXvwnA/",
  "pname" : "Course 101",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Query APIs"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>I have a dream for the Web [in which computers] become capable of analyzing all the data on the Web ? the content, links, and transactions between people and computers.\n\n<footer>Tim Berners-Lee, inventor of the World Wide Web</footer>\n</blockquote>\n\n<h3>Programmatic access to concepts</h3>\n\n<p>So far, we have looked at the concept model and how concepts can have human-readable forms. In this unit, we will look at how concepts can be accessed programmatically, making them <b>machine-readable</b> as well. This is different from traditional web-application frameworks where one must use a separate application API, which may or may not be available, or resort to <a href=\"http://en.wikipedia.org/wiki/Data_scraping\" target=\"_blank\">data scraping</a>. In that sense, ConceptJS is a semantic web technology, sometimes referred to as Web 3.0. \n\n<p>We will first discuss the query APIs available to <b>client-side scripts</b>, i.e., scripts that can be used in the HTML page of a concept. Typically, these scripts are executed when loading the page, or when the user performs an action (such as clicking a button). The <b>server-side scripts</b>, i.e., scripts that run in script expressions, can use the same query APIs as the client-side API. But there are some additional variables available to server-side scripts, which we will cover this later in this unit. \n\n<h4>Running through examples</h4>\n\n<p>This unit is designed to be interactive. Every expression discussed in this unit will be shown in a textbox, which acts like a console. You can click the 'Run' button to execute the expression. You can also make changes to the expression to try other things. There are some exercises with suggestions on specific expressions that you can try out. \n\n<p>Here is an example showing 1+2 = 3. \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"1\" class=\"form-control iScriptTxt\" id=\"\">1+2</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<h3>The <tt>$cjs</tt> variable</h3>\n\n<p>The key object in the ConceptJS client-side API is the global variable <tt>$cjs</tt>. This is similar to <tt>$</tt> in jQuery. The most important way to use this object is as <tt>$cjs([URI])</tt> to access a concept or property using its URI. You can do other things with the <tt>$cjs</tt> object related to searching and updating concepts, but these will be described in the next unit. \n\n<p>Let's get started with a concrete example. The URI of this unit is <tt>local://GPy4iVd5Sa9mDaKuv8WJd9/</tt>. You can open the concept in the IDE mode by clicking on <a href=\"/idelocal://GPy4iVd5Sa9mDaKuv8WJd9/\" target=\"_blank\">this link</a>. Please open the concept in the debugger as well.\n\n<p>The unit number of the unit you are reading can be accessed using the following expression:\n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"1\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/unit/number\").val()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<p>You should see the 7 because that is the number of this unit. \n\n<hr>\n\n<h4>The Property object</h4>\n\n<p>The result of the <tt>$cjs(\"...\")</tt> expression is a Property object. This object supports the method <tt>val()</tt> with which you can access the value of the property. \n\n<p>As you can see the URI that is being accessed includes a <tt>/unit/number</tt> at the end. This is because every property in a concept has a URI. The unit number is a property called <tt>number</tt> within the property <tt>unit</tt> within the concept. \n\n<p><b>Exercise 1: </b> Try changing the .val() to .name() or .uri(). These will refer to the name of the property, which is 'number', and the URI of the property which is the same as the URI used to create the object. \n\n<p>You can also lookup the property from the concept. Here is a script that accesses the number of the unit using two calls to prop. \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"1\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\").prop(\"unit\").prop(\"number\").val()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<p>The above script is exactly the same as the first example. However, this method is better if you don't want to worry about constructing the URI using encoding routines and string operations.  \n\n<p><b>Exercise 2: </b> You can change the \"number\" to \"name\" to get the name of the unit, which is \"Query APIs\". \n\n<p><b>Exercise 3: </b> You can lookup \"unit/number\" instead of looking them up one after another. This is just a short-cut method to make multiple property lookups. \n\n<p><b>Common pattern 1: </b> Here is an example code snippet showing how you can store the Unit concept in a variable and access different properties one after another. \n\n<pre>\nvar unit = $cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/unit\");\nvar number = unit.prop(\"number\").val();\nvar name = unit.prop(\"name\").val();\n...\n</pre>\n\n<h4>The Concept object</h4>\n\n<p>When you pass in a concept URI to <tt>$cjs</tt>, you will get a Concept object. The Concept object is very similar to the Property object, but doesn't support the val() method. \n\n<p>The following expression shows how you can get the name of the course unit that you are currently reading: \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"1\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\").name()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<p><b>Exercise 4: </b> You can replace the .name() with .category() and then .uri() to access the category of the concept, which is 'unit', and the URI fo the concept which is the same as input to <tt>$cjs</tt>.\n\n<p>As you can see, the details of the concept accessible in the Editor's \"Edit Concept Details\" link can be accessed using the uri, name, and category methods. You can also access the parent and children of a concept. For instance, the current unit is filed under a course concept. You can get the object corresponding to the parent concept using the following expression: \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"1\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\").parent().uri()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<p><b>Exercise 5: </b> You can change .parent().uri() to .parentUri() to access the URI of the parent concept. \n\n<p><b>Exercise 6: </b> Can you find the name of the grand-parent of this unit? \n\n<hr>\n\n<p>You can also access the children of a concept using the children() method which takes a URI and returns the concept objects corresponding to the children. In the following example, we are accessing the unit names of all children of the Course concept whose URI we found in the last example. \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"3\" class=\"form-control iScriptTxt\" id=\"\">_.map($cjs(\"local://hACVdZ_UjR8O1KZxTXvwnA/\").children(\"unit\"), \n    function(child) { return child.name(); })\n  .join(\"\\n\")</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<p>We are using the wonderful <a href=\"http://underscorejs.org\" target=\"_blank\">Underscore.js</a> library to write shorter \"functional-programming style\" expressions. All ConceptJS client and server side scripts can access the Underscore library. The above expression finds all children of the course with category \"unit\" and displays their names in separate lines in the output. \n\n<p><b>Exercise 7</b>: Can you change the expression to list just the course names instead of the name of the concept? <i>Hint: </i> Don't forget the .val() to access the value of the property. \n\n<p><b>Exercise 8</b>: Can you use the sortBy function in Underscore.js to list the names of the units in the order sorted by their number? <i>Hint: </i> The <a href=\"/idelocal://GWUiaDKhGKAJsKG1W9fqV0/\" target=\"_blank\">course &lambda;-concept <i class=\"fa fa-external-link\"></i></a> uses a similar script to calculate its 'units' property. \n\n<hr>\n\n<h3>The <tt>isa</tt> and <tt>as</tt> operations</h3>\n\n<div class=\"well well-sm sidenote\">\n<p><i>Missing is-a's: </i> A common issue that arises in ConceptJS development is missing is-a relationships. In other words, a concept has the right properties and continuations, but the is-a relationships to these are missing. For example, I could develop a 'page' property in a \"Hello World\" concept, but forget to create an is-a relationship to the 'page'. This usually translates to unexpected behavior in <tt>.as</tt> and <tt>.isa</tt> operations, missing HTML in the viewer, and so on. \n\n<p>You can get around this problem using the Debugger. Whenever you debug a concept, try to use the <span class=\"fa fa-long-arrow-right\"></span> links as far as possible to get to the next step. This simulates what the system does while tracking down is-a relationships. \n</div>\n\n<p>So far we looked at accessing the details of the concept, its properties and its hierarchy. In this unit, we will look at how is-a relationships can be leveraged in queries. \n\n<p>A drawback in the previously mentioned scripts to access the unit name and number is that they are making a <i>big assumption</i> &mdash; the assumption that the property 'unit' will always hold the details of the Unit. So if I can not redesign the course units any further without breaking all of the above scripts. \n\n<p>A more robust approach is to leverage the is-a relationship from the concept to the lambda concept <a href=\"/idelocal://vKVuPLJ9zC82y44Ofqyf85/\" target=\"_blank\">Course Unit <i class=\"fa fa-external-link\"></i></a>. You can do this with the following methods: <ol>\n<li><b>isa([concept URI])</b>: which determines if the concept implements the given concept URI, and\n<li><b>as([concept URI])</b>: which finds the best is-a match for the current concept with the given concept URI, and \n<li><b>all([concept URI])</b>: (not commonly used) which finds all implementations of the given URI. \n</ol>\n\n<p>The following script shows how you can access the unit number of this unit without assuming that it is held in the \"unit\" property of that concept. Note that this script will work as long there is a direct or indirect relationship from Unit 7 to a bound concept of type \"Course Unit\". \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"3\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\")\n  .as(\"local://vKVuPLJ9zC82y44Ofqyf85/\")\n  .prop(\"number\").val()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<p><b>Exercise 9</b>: You can change the last line from <tt>.prop(\"number\").val()</tt> to <tt>.uri()</tt> to see that the operation simply returns the same property object that we were accessing by looking up the unit property.\n\n<p><b>Exercise 10</b>: You can change the .as() to .isa() and remove the code following it. This will show true because the Unit 7 concept implements the Course Unit. \n\n<hr>\n\n<p><b>Common pattern 2: </b> A very common pattern is to use a .as() on a concept followed by .prop(). If you are accessing many properties, you can store the output of .as() in a local variable that you can then access multiple times. Here is an example: \n\n<pre>\nvar fooAsBar = $cjs(\"...fooUri...\").as(\"...barURI...\");\nvar a = fooAsBar.prop('a').val();\nvar b = fooAsBar.prop('b').val();\n...\n</pre>\n\n<hr>\n\n<p><b>Common pattern 3: </b> If you are looking for exactly one property, you can also use a .prop() with the <b>fully-specified URI of the property</b> which includes the URI of its home lambda-concept followed by its property. For example, the previous script could be rewritten as: \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"3\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\")\n  .prop(\"local://vKVuPLJ9zC82y44Ofqyf85/number\").val()</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<h4>How the viewer works</h4>\n\n<p>In the last unit, we discussed how the viewer picks up the HTML Page implementation of a concept and shows its 'html' property. We will now write a small expression that actually does the work of the viewer. In other words, we will access the human-readable form of a page with the Javascript API. \n\nHere are the first 200 characters of the the human-readable form of the unit you are reading now: \n\n<hr>\n\n<p><div class=\"row iScript\">\n<div class=\"col-xs-12 col-sm-6\">\n  <textarea rows=\"3\" class=\"form-control iScriptTxt\" id=\"\">$cjs(\"local://GPy4iVd5Sa9mDaKuv8WJd9/\")\n  .prop(\"/common/core/iduwOQ2KZv8MWqamwqb6AE/html\").val()\n  .substring(0, 200) + \"...\"</textarea>\n</div>\n<div class=\"col-xs-12 col-sm-1\">\n  <button class=\"btn btn-default iScriptBtn\">Run <i class=\"fa fa-arrow-right\"></i></button>\n</div>\n<div class=\"col-xs-12 col-sm-5\">\n  <pre class=\"iScriptResult\">Click Run</pre>\n</div>\n</div>\n\n<hr>\n\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asideWwbtrdm\">\n        <i class=\"fa fa-caret-right\"></i> Deep dive: Advantages of the concept model over the relational data model\n      </a>\n    </h3>\n  </div>\n\n  <div id=\"asideWwbtrdm\" class=\"panel-collapse collapse dataPanel\">\n    <div class=\"panel-body\">\n\n<p>The relational model has been very successful because of its general-purpose nature. You can model anything as a set of relations with fields. The downside though is that relational models become complex and fragile over time as more and more relations are added. We attribute this to the following reasons: <ol>\n\n<li><b>Lack of transparency: </b> A record means nothing to the end-user without the application that accesses it. This causes a constant friction between the schema designer(s) and the application developer(s). This situation is further complicated by normalization &mdash; a process by which one type of concept could be broken down into many relations. ConceptJS relies on human-readable forms to make it clear to everyone what the concept means. In fact, the application is itself just the human-readable forms of certain concepts. \n\n<li><b>Limited semantic capabilities: </b> ConceptJS uses is-a relationships capture what things mean. One concept can mean many things. For example, independent of how a course unit is designed, I can perform a <tt>.as([course unit URI]).prop(\"name\")</tt> to find out the name of the unit. If the <tt>.as</tt> fails, then it means that the concept is not a course unit. The power of is-a relationships is that you can redesign the course unit without worrying about related functions. With the relational model, the semantics is tied directly to the relations, and there can only be one possible meaning. So if a new type of course unit is introduced, this typically involves difficult schema and application changes. \n\n<li><b>Tendency to become silos: </b> ConceptJS relies on its transparency and flexible semantic model to let everyone manage their information in a loosely-coupled manner. Imagine a relational schema capturing the different examples built on the Beta version of ConceptJS. Such a schema would have to store everything from this tutorial, user details, chess games, chemical elements, exhibits, and so on. A single relational schema would simply become too complex to manage. The alternative is to have several databases. This of course results in silos that require application-level APIs for any cross-silo interaction. \n\n</ol>\n     </div>\n  </div>\n</div>\n\n<hr>\n\n<h3>Getting sample scripts from the debugger</h3>\n\n<p>The debugger makes it very easy to get sample scripts that you can later generalize or cut-paste into your client and server-side scripts. You can click the <i class=\"fa fa-file-code-o\"></i> icon to get a Javascript expression that will retrieve concept or property that you are debugging. \n\n<hr>\n\n<h3>List of query methods in concept and property objects</h3>\n\n<p>Now that we have gone through some samples, we are going to dive into an exhaustive list of query methods available in concept and property objects. The methods used to search and update concepts will be discussed in the next unit. \n\n<p>The following table lists the various query methods available in the Concept and Property objects. \n\n<br>\n<table class=\"table table-hover\">\n<thead>\n<tr><th>Method <th>Supported by concept? <th>Supported by property? <th>Return Value <th>Return Type\n</thead>\n\n<tbody>\n<tr><th>uri() <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>Concept or property URI <td>String\n\n<tr><th>isConcept(), isProperty() <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>True only for concepts or properties (respectively)<td>Boolean\n\n<tr><th>name() <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>Concept or property name <td>String\n\n<tr><th>category()<td><i class=\"fa fa-check\"></i> <td> <td>Return the category of the concept <td>String\n\n<tr><th>anchor() <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>The anchor concept that holds this concept or property <td>Concept object\n\n<tr><th>home() <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>The concept that holds this property or continuation. Returns <tt>this</tt> otherwise. <td>Concept object\n\n<tr><th>isSimple() <br>isBound()<br> isLambda() <td><i class=\"fa fa-check\"></i> <td> <td>True for simple, bound or lambda concepts (respectively)<td>Boolean\n\n<tr><th>propNames <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>Names of properties available inside this concept or property <td>List of String\n\n<tr><th>prop(path) <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> </i> <td>Lookup a property given the '/' separated path. If the path starts with '/', then a .as() is performed on the starting concept URI followed by a .prop() on the remainder. <td>Property object\n\n<tr><th>as(URI) <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>Find the property or continuation with the best implementation of the given URI <td>Property or Concept object\n\n<tr><th>isa(URI) <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>True if as(URI) succeeds <td>Boolean\n\n<tr><th>all(URI) <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>Find all properties or continuations that implement the given URI <td>List of property/concept objects\n\n<tr><th>isNull <td><i class=\"fa fa-check\"></i> <td><i class=\"fa fa-check\"></i> <td>True if this concept or property is the <a href=\"/ide/common/core/qUyEas_wyy8VBqipYQVuHA/\">Null concept</a> <td>Concept object\n\n<tr><th>val() <td> <td><i class=\"fa fa-check\"></i> <td>The value of a property <td>Matches the value type\n\n<tr><th>typeUri() <td><i class=\"fa fa-check\"></i> <td> <td>For bound concepts, this method returns the URI of the lambda-concept. For simple concepts, this method is the same as <tt>uri()</tt> <td>String\n\n<tr><th>parentUri() <td><i class=\"fa fa-check\"></i> <td> <td>Return the parent URI of this concept. This method does not work for bound concepts. <td>String\n\n<tr><th>parent() <td><i class=\"fa fa-check\"></i> <td> <td>Return the concept object corresponding to the parent <td>Concept object\n\n<tr><th>childrenUris([optional category]) <td><i class=\"fa fa-check\"></i> <td> <td>Return the URIs of the child concepts. If the category is specified, only pick up the children corresponding to that category. <td>List of String\n\n<tr><th>children([optional category]) <td><i class=\"fa fa-check\"></i> <td> <td>Return the concept objects corresponding to the children. If the category is specified, only pick up the children corresponding to that category. <td>List of concept objects\n\n</tbody>\n</table>\n\n<h3>Top-level Query APIs</h3>\n\n<p>The following methods are directly available in the global $cjs variable and can be invoked in both client and server scripts: \n\n<br>\n<table class=\"table table-hover\">\n<thead>\n<tr><th>Method<th>Arguments <th>Description<th>Return Type\n</thead>\n\n<tbody>\n<tr><th>getResource <td>Object with the following attributes: <ul>\n<li><b>uri: </b> the uri of the resource concept\n<li><b>type: </b> the HTTP method used to get the resource. Default value is \"GET\". Use \"GETSTR\" if in server-side script\n<li><b>done: </b> callback function if the call is successful. Resource data will be passed as a 'data' argument. If missing, the method will be a synchronized call and will return the resource data\n<li><b>fail: </b> callback function in case of failure</ul> \n<td>This method get the data from a resource concept using its uri. Currently ONLY text resource is supported<td>String\n\n</tbody>\n</table>\n\n<hr>\n\n<h3>Server-side API</h3>\n\n<p>Server-side scripts can access the <tt>$cjs</tt> variable and perform the query methods discussed in the previous unit. The server-side API includes some extra variables described below. \n\n<h4>The <tt>home</tt> variable</h4>\n\n<p>Server-side scripts can use the <tt>home</tt> variable to access the concept in which the script expression is defined. The <tt>home</tt> variable is very similar to <tt>this</tt> in Javascript. It always refers to the closest simple or bound concept in which the property is defined. \n\n<p>For example, the script expression corresponding to the 'namedConcept/name' property in the <a href=\"/idelocal://TyKIqG9e9OA9aa58w1uzKF/\">Course Unit <i class=\"fa fa-external-link\"></i></a>, refers to the course unit that is bound. So the expression <tt>home.prop('name').val()</tt> looks up the name of the course. \n\n<h4>Local variables corresponding to properties</h4>\n\n<p>A common pattern in server-side scripts is to access the values of previously-defined properties. To make this easy, local variables are defined with the same names as the properties. \n\n<p>For example, you can use the shorthand <tt>foo</tt> in place of the longer <tt>home.prop('foo').val()</tt>. However, be sure that the name is a valid Javascript identifier and is not one of the reserved variables such as home. \n\n<h4>The <tt>data</tt> variable</h4>\n\n<p>All script expressions run inside closures. So any variables you define won't be visible to the later script expressions. We do this to reduce dependencies across script expressions. If you want to pass objects from one script variable to another, you can use the <tt>data</tt> variable. \n\n<p>The <tt>data</tt> variable holds an empty object that you can use to keep track of information within the scope of a concept. Take a look at <a href=\"/idelocal://8eMWEYlVgP9JY4PTkyaS2C/\" target=\"_blank\">this example <i class=\"fa fa-external-link\"></i></a>. The concept has two properties with script expressions called 'foo' and 'bar'. As you can see 'foo' can not pass any local variables to bar, unless it utilizes the <tt>data</tt> object. \n\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Server-side scripts are script expressions that are defined in simple and lambda concepts. \n<li>Client-side scripts are scripts that execute in the HTML page corresponding to a concept. \n<li>The <tt>$cjs</tt> variable available in the client and server-side and lets you access concepts and properties using their URIs. \n<li>The key methods available in both concepts and properties are uri(), name(), category(), prop(), as(), isa(), parent() and children(). \n<li>You can access the value of a property using the .val() method. \n<li>The server-side API lets you access the value of any previously-defined property in the same concept using the property name.\n<li>The server-side API also includes a <tt>home</tt> object which represents the concept object of the current concept. \n<li>Finally, the server-side API has a <tt>data</tt> object that you can use to pass Javascript objects from one script expression to another. \n</ul>\n\n<script>\n$(function() {\n  $(\".iScriptBtn\").click(function() {\n    var script = $(this).closest(\".iScript\").find(\".iScriptTxt\").val();\n    var result = '';\n    try {\n      result = eval(script);\n    } catch (err) {\n      result = \"Exception: \" + err;\n    }\n    $(this).closest(\".iScript\").find(\".iScriptResult\").text(result);\n  });\n});\n</script>\n\n\n\n\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 7
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}