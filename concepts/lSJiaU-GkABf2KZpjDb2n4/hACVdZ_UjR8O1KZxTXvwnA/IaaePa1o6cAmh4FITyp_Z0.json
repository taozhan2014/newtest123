{
  "uri" : "local://IaaePa1o6cAmh4FITyp_Z0/",
  "name" : "Unit 9: Core concepts for searching, downloading, naming and RDF export",
  "category" : "unit",
  "parent" : "local://hACVdZ_UjR8O1KZxTXvwnA/",
  "pname" : "Course 101",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Core concepts for searching, downloading, naming and RDF export"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>Less is more. \n\n<footer>Ludwig Mies van der Rohe, architect, 1886?1944</footer>\n</blockquote>\n\n<h3>Core concepts as declarations</h3>\n\n<p>The only core concept discussed so far has been the HTML Page. In this unit, we will cover other core concepts supported by the ConceptJS platform beyond the HTML Page. Surprisingly, there are only a handful of core concepts in ConceptJS. \n\n<p>Core concepts serve as methods to <i>declare</i> certain behaviors. In other words, by implementing the \"HTML Page\", the concept says that \"I am a HTML Page with this html\". The platform uses these declarations to process the concepts accordingly. The rest of this unit discusses the details of other core concepts. \n\n<hr>\n\n<h3>Web Resource</h3>\n\n<div class=\"well well-sm sidenote\">\n<p><i>Concepts and properties can be resources: </i> You can use the URI <tt>/resource/[property URI]</tt> to access the Web Resource implemented by a property. For example, let's consider a concept called Course that implements both a calendar event in the property 'event', and a CSV file with the course topics in the property 'topics'. We can now access <tt>/resource/[course URI]/event</tt> to download the iCal and <tt>/resource/[course URI]/topics</tt> to download the CSV file. \n</div>\n\n<p>Web Resource lets you create downloadable content corresponding to a concept that can be accessed using the path <tt>/resource/[concept/property URI]</tt>. For example, if we had to model a CSS file, an iCal event, an image, the common thread in these requirements is that these concepts must be delivered through HTTP as a specific <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\">content type</a>. The main difference between HTML Page and Web Resource is that the latter is meant to be a machine-readable file.\n\n<p>The core concept Web Resource has the following lambda-properties: \n<ol>\n<li><b>content</b>: The content of the Web Resource. This can be empty if the attachmentLink is specified. Otherwise, the HTTP URL corresponding to <tt>/resource/[concept/property uri]</tt> will deliver the content in this string property. \n<li><b>type</b>: This is the content type, also referred to as the internet media type or MIME type, corresponding to this web resource. \n<li><b>filename</b> (optional): This is a string property that optionally specifies the file name that must be associated with this download. \n<li><b>attachmentLink</b> (optional): This is an optional string property that captures the URI of an attachment uploaded using the REST API. This is used for internal purposes only. \n</ol>\n\n<p>The following video shows how you can use a CSS web resource concept, which internally uses \"Web Resource\", to create a common CSS file that can be used by any view. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n\n<iframe src=\"//fast.wistia.net/embed/iframe/6jf6mrb7lz\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"424\"></iframe>\n\n</figure>\n\n<br>\n\n<hr>\n\n<h3>RDF XML</h3>\n\n<p><a href=\"/ide/common/core/8zDXTAXkzR94L4T6QuE878/\">RDF XML</a> is lambda-concept that is very similar to Web Resource, except that the <tt>content</tt> should be a valid RDF XML document that represents the concept using RDF triples. You can either implement this concept directly or use the <a href=\"/ide/common/core/T9FO2RY3fuAx4q6AAp7ET7/\">Mustache RDF XML</a> concept that allows you to specify a template. \n\n<p>The HTTP URL corresponding to <tt>/rdf/[concept/property uri]</tt> will deliver the content of the RDF XML implemented by the given concept or property. These URLs can be used by Semantic Web engines. \n\n<p>The following video shows how you create an RDF representation for all programmer implementations. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n\n<iframe src=\"//fast.wistia.net/embed/iframe/6wrdd2bd7g\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"460\"></iframe>\n\n</figure>\n\n<br>\n\n<hr>\n\n<h3>Named Resource</h3>\n\n<p>Certain concepts are well-structured enough that their name only depends on their properties. For example, if I wanted to name all the concepts implementing Person to use their own name followed by '(person'), like Tim Berners-Lee (person), I would have to manually edit every concept in the repository. This is, of course, less desirable compared to a programmatic way to simply assign the name to be computed from the properties. Named concept is a core concept that let's you do this. \n\n<p>The core concept Named Concept has one lambda-property called <b>name</b> which will be assigned to the concept that implements it. The name is updated whenever the concept is evaluated. You can take a look at the 'namedConcept' property in the lambda-concept <a href=\"/viewlocal://vKVuPLJ9zC82y44Ofqyf85/?mode=ide\" target=\"_blank\">Course Unit <i class=\"fa fa-external-link\"></i></a> to see how this works. \n\n<hr>\n\n<h3>Null</h3>\n\n<p>Null is a simple core concept with no properties. This concept is assigned to all optional lambda properties that <i>aren't specified</i> in a binding. \n\n<p>You can use the <b>isNull()</b> method on properties and concepts to determine if they are null. \n\n\n<hr>\n\n<h3>Index Entry</h3>\n\n<p>ConceptJS uses <a href=\"http://www.elasticsearch.org\" target=\"_blank\">Elastic Search</a> to index concepts so that they can be searched and retrieved quickly. Elastic search is a very powerful indexing technology based on Lucene. The two core concepts, Index Entry and Index Entry Type, are used to declare which properties in which concepts need to be indexed. \n\n<p>The Index Entry concept has one lambda-property that takes an Index Entry Type. This is implemented by any concept that wants to be indexed. The Index Entry Type has two lambda-properties: \n<ol>\n<li><b>indexUri</b>: This is the URI of the lambda concept which created the index entry - which concept need to be indexed. \n<li><b>fieldTypes</b>: This is a JSON snippet for the mapping types of the index - which properties need to be indexed. The JSON format is the same as what defined in the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping.html\" target=\"_blank\">Elastic Search Index Mapping Document</a>. All ES types are supported.\n</ol>\n\n<h4>A Example</h4>\n\nYou can take a look at <a href=\"/ide/common/admin/q1ieXnXFl-BMOKrP2NGAR6/\" target=\"_blank\">Exhibit Index Entry Type <i class=\"fa fa-external-link\"></i></a> to see how index type concept is created for exhibit item concept.\n\nThe index mappings type are defined as below (please check <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-core-types.html\" target=\"_blank\">ES supported types</a> for the completed document):\n\n<pre>\n{ \"exhibitName\" : { \"type\" : \"string\" },\n  \"description\" : { \"type\" : \"string\" }, \n  \"creationTime\" : { \"type\" : \"date\"},\n  \"popularIndex\" : { \"type\" : \"float\"},\n  \"imageUrl\" : {\"type\" : \"string\"},\n  \"seedUri\" : {\"type\" : \"string\", \"index\" : \"not_analyzed\"},\n  \"viewCT\" : {\"type\" : \"integer\"},\n  \"commentCT\" : {\"type\" : \"integer\"},\n  \"loveCT\" : {\"type\" : \"integer\"},\n  \"regenerateThumbnail\" : {\"type\" : \"boolean\"},\n  \"lovedUsers\" : {\"type\" : \"string\", \"index_name\" : \"lovedUser\"},\n  \"owner\" : {\"type\" : \"string\"},\n  \"isDownloadable\" : {\"type\" : \"boolean\"},\n  \"conceptUri\" : {\"type\" : \"string\", \"index\" : \"not_analyzed\" },\n  \"isEditorPicked\" : {\"type\" : \"boolean\"} }\n</pre>\n\nAny concept C that implements an index entry with the type set to \"Exhibit Index Entry Type\" will automatically be processed as follows: <ol>\n<li>The system will first evaluate <tt>C.as([indexUri of index type])</tt>. \n<li>It will then create a document according to the ES mapping types defined in the the fieldTypes JSON, and index that document against this concept.\n</ol>\n\n<p><a href=\"/ide/common/admin/jqk59b7pW58wCaeNSPLaR7/\" target=\"_blank\">common Exhibit Sicilian Defense (Dragon variation) <i class=\"fa fa-external-link\"></i></a> is an example of such concept. It implements the Exhibit lambda concept with index entry and index type described above. \n\n<h4>Search APIs</h4>\n<hr>\n<p>Once the concepts are indexed, you can use the search APIs described below to search by the indexed properties. Note that a concept can implement any number of Index Entries. The platform uses <tt>.all()</tt> to find all is-a implementations to index the concept. \n\n<br>\n<table class=\"table table-hover\">\n<thead>\n<tr><th>Method<th>Arguments <th>Description\n</thead>\n\n<tbody>\n<tr><th>searchByName <td><ol>\n<li><b>queryStr: </b> the key word in concept name to be searched\n<li><b>from: </b> start index of the search results\n<li><b>size: </b> total # of search records to be returned\n<li><b>successFn: </b> callback function if search is sucessful\n<li><b>failFn: </b> callback function if search is failed\n<li><b>ruri: </b> limit search in specific repository</ol><td>This method searches concept definition by name\n\n<tr><th>searchByUri <td><ol>\n<li><b>uri: </b> the uri of the concept\n<li><b>from: </b> start index of the search results\n<li><b>size: </b> total # of search records to be returned\n<li><b>successFn: </b> callback function if search is successful\n<li><b>failFn: </b> callback function if search is failed</ol><td>This method searches  a specific concept definition by its uri\n\n<tr><th>search <td>Object with the following attributes: <ol>\n<li><b>uri: </b> the index entry uri to search\n<li><b>queryJson: </b> a ES query JSON. Please check <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-queries.html\" target=\"_blank\">ES query DSL</a> for the completed document\n<li><b>sortJson: </b> a JSON array for sorted field. The format of the JSON are: [ { \"field\" : \"[sort field]\", \"order\" : \"[ASC] | [DESC]\"}, ...]\n<li><b>from: </b> start index of the search results\n<li><b>size: </b> total # of search records to be returned\n<li><b>done: </b> callback function if search is successful\n<li><b>fail: </b> callback function if search is failed</ol> \n<td>This method searches concepts implementing certain index entry using ES query DSL\n\n<tr><th>searchConc <td>Object with the following attributes: <ol>\n<li><b>ruri: </b> restrict the search in the specific repository with ruri\n<li><b>queryJson: </b> a ES query JSON. Please check <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-queries.html\" target=\"_blank\">ES query DSL</a> for the completed document\n<li><b>sortJson: </b> a JSON array for sorted field. The format of the JSON are: [ { \"field\" : \"[sort field]\", \"order\" : \"[ASC] | [DESC]\"}, ...]\n<li><b>from: </b> start index of the search results\n<li><b>size: </b> total # of search records to be returned\n<li><b>done: </b> callback function if search is successful\n<li><b>fail: </b> callback function if search is failed</ol> \n<td>This method searches concept definitions using ES query DSL\n</tbody>\n</table>\n\nAll search API returns ES standard search response JSON. You can check the <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-body.html\" target=\"_blank\"> ES search API </a> for response detail.\n\n<h5>A Example</h5>\n\nYou can take a look at <a href=\"/ide/common/gallery/9RabA9-VMWBiNaSeB59w5A/\" target=\"_blank\">Default Gallery View<i class=\"fa fa-external-link\"></i></a> to see how search API is used to find the exhibit items for the ConceptJS Editor's Top Picks page.\n\nThe code snippet below shows the search method:\n<pre>\n$cjs.search({\n    uri: $cjs.uris.exhibitIndexEntryType,\n    queryJson: {\n                           \"bool\" : {\n                               \"must\" : [ { \"query_string\": { \"query\" : [data] } },\n                                               { \"term\" : { \"isEditorPicked\" : true} } ]\n                           }\n                       },\n    sortJson: [{\"field\" : \"creationTime\", \"order\" : \"DESC\"}],\n    done : function(data){\n        ...\n    },\n    fail : function(jqXHR, textStatus, errorThrown){\n        ...\n    }\n});\n</pre>\n\n<hr>\n\n<h3>Recap</h3>\n\n<p>Any concept can implement a core concept to declare certain behaviors. We covered the following core concepts in this unit: \n\n<ul class=\"recap\">\n<li><b>Web Resource</b>: This concept can be used to create a downloadable file corresponding to a concept. \n\n<li><b>RDF XML</b>: This concept can be used to create an RDF representation for a concept. \n\n<li><b>Named Concept</b>: This concept can be used to automatically assign a name to a concept based on its properties. \n\n<li><b>Null</b>: This concept is bound to optional lambda-properties that are not specified in the binding. \n\n<li><b>Index Entry</b> and <b>Index Entry Type</b>: This concept is used to index a concept in the Elastic Search server hosted at ConceptJS. \n</ul>\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 9
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}