{
  "uri" : "local://bzFHwq_M87AKsK0rbixETB/",
  "name" : "Unit 3: Simple properties and concepts",
  "category" : "unit",
  "parent" : "local://hACVdZ_UjR8O1KZxTXvwnA/",
  "pname" : "Course 101",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Simple properties and concepts"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>Information about the package is as important as the package itself.\n\n<footer>Frederick W. Smith, Founder and CEO of FedEx</footer>\n</blockquote>\n\n<h3>Simple properties</h3>\n\n<p>The information related to a concept is usually stored in its properties. A concept can have any number of properties. Properties can be <i>simple properties</i> or <i>lambda properties</i>. In this unit, we will discuss <i>simple properties</i>. \n\n<p>A concept which only has simple properties is called a <i>simple concept</i>. We will discuss lambda properties and lambda concepts (concepts with one or more lambda properties) in the next unit. \n\n<hr>\n\n<h3>Simple expressions</h3>\n\n<p>Simple properties have a name and a value that is calculated from an expression. The following types of expressions are supported by ConceptJS: \n\n<p><table class=\"table table-hover\">\n<thead>\n  <tr><th>Type <th>Usage\n</thead>\n<tbody>\n  <tr><th>String <td>String expressions can capture any Unicode string. <p class=\"small\">These expressions translate to strings in Javascript. Examples include \"foo\", \"An example string\", and so on. \n  <tr><th>Number <td>Numeric expressions can capture numbers. <p class=\"small\">These expressions translate to numbers in Javascript. Examples include -1, 3.1415, and so on. \n  <tr><th>Boolean <td>Boolean expressions are either true or false. <p class=\"small\">These expressions translate to booleans in Javascript. \n  <tr><th>JSON <td>JSON expressions can capture JSON snippets. <p class=\"small\">These expressions translate to objects in Javascript that are constructed using JSON.parse() function. Examples include {\"foo\": \"bar\"}, {\"list\": [0, 1, 2], \"map\": {\"foo\": \"bar\"}} and so on. You can read the <a href=\"http://json.org/\" target=\"_blank\">JSON specification</a> to learn more about the JSON format.\n  <tr><th>Concept <td>Concept expressions are references to other concepts. \n  <tr><th>Property <td>Property expressions can be used to lookup properties in the current concept, also referred to as the <i>home</i> concept. We will discuss this in unit 7. \n  <tr><th>Script <td>Script expressions are blocks of Javascript code that can must \"return\" the value of the property at the end. <p class=\"small\">You can enter a script such as <kbd>return 1+2</kbd> to return the number 3. You can also add two properties foo and bar using a script like this <kbd>return foo + bar;</kbd>.\n</tbody>\n</table>\n\n<p>You can look at the following video to see how a simple concept can be created to represent Tim Berners-Lee, the inventor of HTML and the World-Wide Web. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n\n<iframe src=\"//fast.wistia.net/embed/iframe/x6n7aqeb1i\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"424\"></iframe>\n\n</figure>\n\n<br>\n\n<p><b>Exercise 1: </b> Create a copy of the <a href=\"/idelocal://z-3PJtVZKpA-D4eG-RT6B8/\" target=\"_blank\">Tim BL v1</a> concept to your <tt>default</tt> repository, and change it to capture information about yourself. \n\n<hr>\n\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asidePdfrir\">\n        <i class=\"fa fa-caret-right\"></i> Deep dive: How are properties different from records in relational databases?\n      </a>\n    </h3>\n  </div>\n\n  <div id=\"asidePdfrir\" class=\"panel-collapse collapse dataPanel\">\n    <div class=\"panel-body\">\n\n<p>If you are familiar with relational databases, you are probably wondering how properties are different from records. Properties are similar to fields in records. The simple types (string, boolean, number and JSON) can be modeled as simple types in relational databases. Similarly, the concept references can be modeled as foreign keys. \n\n<p>Scripts and property lookups are not typically included in relational models. In ConceptJS, you are not only building the database &mdash; you are also building the application. So scripting becomes central to the concept model. \n\n<p>The rationale behind the relational data model is to store the most normalized form of the information in relations. This means that all the code that operates on the data must be kept elsewhere in the application layer. ConceptJS doesn't follow the traditional layered architecture where data and code are kept in separate layers, because this leads to silos and complexity. \n    </div>\n  </div>\n</div>\n\n<hr>\n\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asidePdftir\">\n        <i class=\"fa fa-caret-right\"></i> Deep dive: How are properties different from triples in RDF?\n      </a>\n    </h3>\n  </div>\n\n  <div id=\"asidePdftir\" class=\"panel-collapse collapse\">\n    <div class=\"panel-body\">\n\n<p>Triples in RDF have similarities to properties. The subject in the triple can refer to the concept, the property URI can refer to the property name, and the object can be the value of the expression. \n\n<p>As mentioned in the previous deep-dive, one of the main differences is that triples can not include script expressions. There are a couple of other key differences: \n<ol>\n<li><b>Human readability</b>: Concepts are meant to serve as human-readable documents or applications, that make sense to the user of that information. The Semantic Web is not designed to be human-readable to end-users. \n<li><b>Part of the definition</b>: Concepts are defined by their properties. Properties aren't assertions about the concepts that can be refuted, or need to be sourced. In other words, there is no adjudicating on whether or not a property is correct or incorrect. Higher-level ideas such as propositions, arguments and references can be modeled as concepts. \n<li><b>Function/argument model</b>: Concepts are closer to Frege's function/argument model than the subject/predicate model. In other words, concepts can have any number of properties, and don't have to be broken down into subject-verb-object form (triples). You can read more about Frege's work <a href=\"http://plato.stanford.edu/entries/frege/\">here</a>. The following quote clarifies the difference between the models. \n</ol>\n\n<blockquote>\n<p>A distinction of subject and predicate finds no place in my way of representing a judgement. In order to justify this, let me observe that there are two ways in which the content of two judgements may differ; it may, or may not, be the case that all inferences that can be drawn from the first judgement when combined with certain other ones can also be drawn from the second when combined with the same other judgements. The two propositions \"the Greeks defeated the Persians at Plataea\" and \"the Persians were defeated by the Greeks at Plataea\" differ in the former way; even if a slight difference of sense is discernible, the agreement in sense is preponderant. Now I call the part of the content that is the same in both the <i>conceptual content</i>. Only this has significance for our symbolic language.\n\n<footer><a href=\"http://www.olimon.org/uan/frege-writings.pdf\">Begriffsschrift (translates to concept script)</a> by Gottlob Frege in 1879</footer>\n</blockquote>\n    </div>\n  </div>\n</div>\n\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Properties store the information about a concepts.  \n<li>Properties can be simple properties or lambda properties. \n<li>A concept with only simple properties is called a simple concept. Otherwise, the concept is a lambda concept. \n<li>A simple property has a name and an expression. \n<li>Expressions can be strings, numbers, booleans, JSON, concept references, property lookups and scripts. \n<li>Any Javascript code can be included in a script expression, as long as it returns the value of the property at the end. \n</ul>\n\n\n\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 3
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}