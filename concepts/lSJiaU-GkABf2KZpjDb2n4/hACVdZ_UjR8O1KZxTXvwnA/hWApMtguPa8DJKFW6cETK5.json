{
  "uri" : "local://hWApMtguPa8DJKFW6cETK5/",
  "name" : "Unit 5: Is-a relationships",
  "category" : "unit",
  "parent" : "local://hACVdZ_UjR8O1KZxTXvwnA/",
  "pname" : "Course 101",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "Is-a relationships"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.\n\n<footer>James Whitcomb Riley, American writer and poet, 1849-1916\n</blockquote>\n\n<h3>Introducing is-a relationships</h3>\n\n<div class=\"well sidenote\">\n<p>The is-a relationship has its roots in <a href=\"https://en.wikipedia.org/wiki/Syllogism\" target=\"_blank\">syllogisms</a>. Here is an often-referenced example: \n<ul>\n<li>All men are mortal. \n<li>Socrates is a man.\n<li>Therefore, Socrates is mortal.\n</ul>\n\n<p>Syllogisms fell out of favor because of their inability to create a complete and consistent propositional logic. However, we use is-a relationships as a vehicle for definition, not deduction. \n</div>\n\n<p>In this unit, we will discuss the most unique aspect of the concept model, called the is-a relationship. In the last unit, we created concepts \"Tim Berners-Lee\" and \"James Gosling\" with a property 'programmer' which held a binding of a lambda-concept called \"Programmer\". However, this doesn't fully represent the semantics, i.e., meaning, of Tim or James. Tim doesn't have a programmer property. Rather, Tim <i>is</i> that programmer. How do we say that?\n\n<p>Enter the is-a relationship, also represented using the symbol <span class=\"fa fa-long-arrow-right\"></span> (right arrow). By establishing an is-a relationship: \n\n<p class=\"text-center\"><b>A <span class=\"fa fa-long-arrow-right\"></span> B</b></p>\n\n<p>we are saying that everything that is known about the concept B applies to the concept A. So when we say that Tim <span class=\"fa fa-long-arrow-right\"></span> Tim.programmer, we are saying that everything that is known about the bound concept Programmer with name 'Tim Berners-Lee' and so on, applies to the concept Tim. \n\n<p>We use the phrases \"A is-a B\" or \"A implements B\" in English to express A <span class=\"fa fa-long-arrow-right\"></span> B. For instance, we can say that Tim implements Programmer or Tim is-a Programmer. \n\n<hr>\n\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asideIk\"><i class=\"fa fa-caret-right\"></i> Deep dive: Inheritable knowledge</a>\n    </h3>\n  </div>\n\n  <div id=\"asideIk\" class=\"panel-collapse collapse mathPanel dataPanel\">\n    <div class=\"panel-body\">\n<p>ConceptJS employs a very strict definition for A <span class=\"fa fa-long-arrow-right\"></span> B, in that everything that is known about B applies to A. So something like Texas <span class=\"fa fa-long-arrow-right\"></span> USA, is incorrect because the population of United States doesn't apply to Texas. However, you could model Texas <span class=\"fa fa-long-arrow-right\"></span> US State, and that would be correct. \n\n<p>Some knowledge systems differentiate between class-level knowledge and instance-level knowledge. ConceptJS doesn't make such a distinction. So if there is some piece of information that applies to US State, but not to Texas, then that information must not be maintained in the US State concept. In other words, concepts must only capture <i>inheritable knowledge</i> so that is-a relationships behave as intended. \n\n    </div>\n  </div>\n</div>\n\n<hr>\n<h3>Types of is-a relationships</h3>\n\n<p>A concept can have any number of is-a relationships. Each is-a relationship can refer to: \n<ul>\n<li>A property of that concept, provided the value of the property is a simple or bound lambda concept,\n<li>A simple concept, or \n<li>A lambda concept with exactly one lambda property (also called a \"continuation\").\n</ul>\n\n<h4>An example</h4>\n\n<p>The following video shows how we can say that Tim and James are programmers. We also create a simple concept called \"Programmer with Beard\" which James indirectly implements via the Programmer lambda-concept. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n<iframe src=\"//fast.wistia.net/embed/iframe/5px074fcld\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"424\"></iframe>\n</figure>\n\n<br>\n\n<p>When establishing an is-a relationship, we can also add an \"on-condition property\" that must be true for this is-a relationship to take effect. The above video showed how the \"hasBeard\" lambda-property was used to conditionally establish an is-a relationship to \"Programmer with Beard\". \n\n<h4>Is-a relationship to a property</h4>\n\n<p>The most common way to establish an is-a relationship is to bind a lambda-concept in a property and establish an is-a relationship to that property. We already saw an example of this with Tim <span class=\"fa fa-long-arrow-right\"></span> Tim.programmer. \n\n<h4>Is-a relationship to a simple concept</h4>\n\n<p>Is-a relationships can also be established to simple concepts. We saw an example of this from the \"Programmer\" <span class=\"fa fa-long-arrow-right\"></span> \"Programmer with Beard\". \n\n<p>This is a common way to classify concepts into other types of concepts. For example, you could model <a href=\"https://en.wikipedia.org/wiki/Biological_classification\" target=\"_blank\">biological classification</a> in ConceptJS by having concepts for each Species, Genus, Family, and so on, and establishing is-a relationships from the specific concepts to the generic concepts. Now, all that is known about <a href=\"https://en.wikipedia.org/wiki/Panthera\" target=\"_blank\">Genus Panthera</a> would apply to <a href=\"https://en.wikipedia.org/wiki/Tiger\" target=\"_blank\">Tiger</a>. \n\n<hr>\n\n<div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asideSsrst\"><i class=\"fa fa-caret-right\"></i> Deep dive: Similarity to ontologies in Semantic Web and subsets in set theory</a>\n    </h3>\n  </div>\n\n  <div id=\"asideSsrst\" class=\"panel-collapse collapse mathPanel dataPanel\">\n    <div class=\"panel-body\">\n<p>Is-a relationships from simple concepts to other simple concepts are similar to  subset-of relationships in set theory, or ontological classification in Semantic Web terminology. Ontological classification and subsets follow the transitive and reflexive properties of the is-a relationship. \n\n<p>However, there is no difference between a class and an instance in the concept model. In set theory, the classes are sets and instances are elements. An ontology specified in OWL, for example, can have instances. The concept model does not have this distinction. \n    </div>\n  </div>\n</div>\n\n<hr>\n\n<p><div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asideSti\"><i class=\"fa fa-caret-right\"></i> Deep dive: Similarity to inheritance</a>\n    </h3>\n  </div>\n\n  <div id=\"asideSti\" class=\"panel-collapse collapse progPanel\">\n    <div class=\"panel-body\">\n<p>Is-a relationships are somewhat similar to inheritance in object-oriented programming. In fact, the <span class=\"fa fa-long-arrow-right\"></span> symbol was borrowed from the UML representation of object inheritance. \n\n<p>Although the semantics of the is-a relationship is similar to inheritance, the runtime model is totally different from objects. All properties are evaluated in sequence, and the is-a relationships are established at the end of the process based on the on-condition properties. The object runtime and inheritance model is more complex and quite different involving constructors, methods, and so on. \n    </div>\n  </div>\n</div>\n\n<hr>\n\n<h3>Is-a relationships to a lambda concepts, aka continuations</h3>\n\n<p>Is-a relationships can also apply to lambda concepts that have a single lambda-property. Such is-a relationships are also called <b>continuations</b>. Continuations can be a little confusing at first, but they crucial to achieving <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\" target=\"_blank\">separation of concerns</a> within a concept. \n\n<p>When an is-a relationship is defined from A <span class=\"fa fa-long-arrow-right\"></span> B, where B is a lambda-concept with a single property (say) x, the evaluation algorithm will bind B.x to A and evaluate it. We call B a continuation concept because it <i>continues</i> to establish is-a relationships to A. \n\n<p>You can take a look at the following video to see an example of a continuation. In this example, we build a common web page that works for all programmers. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n<iframe src=\"//fast.wistia.net/embed/iframe/ra7tjsekz9\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"460\"></iframe>\n</figure>\n\n<br>\n\n<p>The web page was built using a continuation concept called \"Programmer View\". Here is the link to the <a href=\"/idelocal://mTkMVbp7HZ97-KZ4YjRoN5/\" target=\"_blank\">Tim BL v3</a> concept shown in the video. You can also look at the debugger to understand how the concept works. The basic idea behind this is as follows: \n<ul>\n<li>\"Tim-Berners Lee\": The simple concept capturing Tim\n<li>... <span class=\"fa fa-long-arrow-right\"></span> Binding of \"Programmer\": Is a Programmer\n<li>... <span class=\"fa fa-long-arrow-right\"></span> Binding of \"Programmer View\": Is a \"Programmer View\" with the property 'model' referring to the programmer. \n<li>... <span class=\"fa fa-long-arrow-right\"></span> Binding of \"HTML Page\": Is a HTML page that shows his details. \n</ul>\n\n<p>Note that HTML Page is a \"core concept\" that tells the ConceptJS platform that this concept must be rendered as a web-page with the given html content in the viewer. We will discuss the HTML Page concept in the next unit. \n\n<h4>Advantages of using continuations</h4>\n\n<p>In the previous example, we could have just added the is-a relationship to the HTML Page from the Programmer concept. This would have worked as well, but there are a few big advantages when using continuations: \n<ol>\n<li><b>Separation of concerns</b>: The \"Programmer View\" takes care of rendering the \"Programmer\" concept, and keeps the \"Programmer\" concept easy to understand. Continuations are great way to separate the core information model from secondary aspects such as how to render the concept, export it to a certain data format, and so on. In software, this is called <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\" target=\"_blank\">separation of concerns</a>. \n\n<li><b>Better performance</b>: Continuations can also be used to postpone or avoid unnecessary computations. So the view for Tim or James will not be calculated till something like the viewer explicitly demands the \"HTML Page\". This process is called \"casting\" a concept (like Tim) to another concept (like HTML Page). We will discuss this in the Javascript API section. \n\n<li><b>Avoiding cyclic dependencies</b>: You can move advanced computations and queries into continuations to make sure that each concept can be evaluated without cyclic dependencies to itself. For example, Tim's view can load James Gosling's name and vice-versa without causing a cyclic dependency in the evaluation algorithm. This is because the view would only be evaluated when a human-readable form is requested. So Tim's view won't be needing James' view &mdash; only his name. As a general rule, it is better to keep concepts simple and self-contained, and move the complexity into  continuations. \n</ol>\n\nFor these reasons, it is better to have a separate continuation concept \"Programmer View\" that renders the Programmer. \n\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>Is-a relationships are the main mechanism by which concepts establish what they are. \n<li>A concept can create an is-a relationship to a property within the concept, another simple concept, or a different lambda-concept with a single property (aka continuation). \n<li>The is-a relationship is reflexive and transitive. In other words, A <span class=\"fa fa-long-arrow-right\"></span> B and B <span class=\"fa fa-long-arrow-right\"></span> C means that A <span class=\"fa fa-long-arrow-right\"></span> C. \n<li>An is-a relationship can optionally have an on-condition property which must be true for it to take effect. \n<li>Continuations are a good way to achieve separation of concerns, improve performance and avoid cyclic dependencies. \n</ul>\n\n\n\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 5
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}