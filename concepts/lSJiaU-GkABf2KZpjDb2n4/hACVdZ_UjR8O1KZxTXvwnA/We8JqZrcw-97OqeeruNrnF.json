{
  "uri" : "local://We8JqZrcw-97OqeeruNrnF/",
  "name" : "Unit 6: The human-readable form of a concept",
  "category" : "unit",
  "parent" : "local://hACVdZ_UjR8O1KZxTXvwnA/",
  "pname" : "Course 101",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_unit_name",
    "expr" : {
      "str" : "The human-readable form of a concept"
    }
  }, {
    "name" : "_unit_content",
    "expr" : {
      "str" : "<blockquote>\n<p>Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\n\n<footer>Martin Fowler, from \"Refactoring: Improving the Design of Existing Code\" pub. 1999</footer>\n</blockquote>\n\n<h3>Introducing core concepts</h3>\n\n<p>The concept model presented in the last four units (2-5) form the foundation of ConceptJS. These units summarized the concept hierarchy, properties, lambdas and is-a relationships respectively. But so far, we have only seen concepts store information and establish their meaning. How can we turn concepts into applications? For this, we need \"core concepts.\"\n\n<p><b>Core concepts</b> are a handful of special concepts recognized by the ConceptJS platform. Concepts can perform various actions by establishing is-a relationships to core concepts. In this unit, we will go over the most important core concept, called \"HTML Page\". \n\n<h3>HTML Page and the human-readable form</h3>\n\n<div class=\"well well-sm sidenote\">\n<i>Curious?</i> The page that you are looking right now is showing the html property of the HTML Page implemented by this concept. You can open this concept in the IDE and debug it. You can drill down the <span class=\"fa fa-long-arrow-right\"></span> relationships and find the is-a relationship to \"HTML Page\". The html property will match the HTML shown in this frame. \n</div>\n\n<p>HTML page is the most commonly used core concept. Any concept can make itself shown in the viewer by establishing an is-a relationship (<span class=\"fa fa-long-arrow-right\"></span>) relationship to the HTML Page concept. We call this the <b>human-readable form</b> of the concept. \n\n<p>HTML Page is a lambda-concept with a single lambda-property called html. The content of this string property is displayed in the viewer. You can take a look at <a href=\"https://lambdazen.blogspot.com/2014/09/hello-world-in-conceptjs.html\" target=\"_blank\">this blog post</a> for a longer discussion on the Hello World concept vs. a Hello World program. \n\n<hr>\n\n<h3>Mustache HTML Page</h3>\n\n<div class=\"well well-sm sidenote\">\n<i>Not a core concept: </i> <a href=\"/view/common/core/Xfh2VQ4HSK9klqbqqR-eBB/?mode=ide\" target=\"_blank\">Mustache HTML Page <i class=\"fa fa-external-link\"></i></a> is not a core concept. You can look at the code in the editor to see how it works. \n</div>\n\n<p><a href=\"https://github.com/janl/mustache.js\" target=\"_blank\">Mustache</a> is a popular template system available in Javascript. The concept \"Mustache HTML Page\" lets you use the mustache template system to create pages with cleanly-separated templates and substitutions. \n\n<hr>\n\n<h3>The importance of the human-readable form</h3>\n\n<div class=\"well well-sm sidenote\">\n<p><i>Keeping docs and apps together: </i>Because of the flexibility of the concept model, you can use the HTML Page concept to capture user interfaces, process and documentation for the concepts that you develop. This is different from traditional software systems where these items are maintained in different places such as source-code control systems, Wikis, bug-tracking systems, and so on. With ConceptJS, we encourage that all administrative interfaces and documentation be tied to the relevant concepts. \n</div>\n\n<p>We recommend that every concept have a human-readable form that documents the concept in a manner that is <i>meaningful to the user of that concept</i>. The human-readable form must allow the user to both understand and update the concept. When the human-readable forms become sophisticated and well-connected, a web of concepts can give the user the impression of a web application. \n\n<p>Even concepts that aren't meant to be the face of the application, must ideally have a human-readable form. The little extra time taken to build a human-readable form usually pays off with huge productivity gains later. For example, the human-readable form of <a href=\"/viewlocal://We8JqZrcw-97OqeeruNrnF/\" target=\"_blank\">this course unit <i class=\"fa fa-external-link\"></i></a> shows the unit number, title and the HTML content. In fact, we did most of the course development in the viewer, not the editor. In traditional software terms, this is the difference between directly editing records in a database, and editing them with an administrative application. \n\n<p>Markup languages like XML and JSON claim to be human and machine readable at the same time. However the human-readable form doesn't compare to a well-designed web-page. There is a longer discussion on this subject in the article titled <a href=\"http://workflow.healthbase.info/monographs/XML_myths_Browne.pdf\">The myth of self-describing XML</a> by Eric Browne (2003). \n\n<p>Developing a human-readable form for a concept also helps determine if the concept really reflects the user's mental model. If it is hard to write down what a concept means, you may be looking at the symptom of a deeper problem with its design. \n\n<hr>\n\n<p><div class=\"panel panel-default\">\n  <div class=\"panel-heading\">\n    <h3 class=\"panel-title\">\n      <a data-toggle=\"collapse\" href=\"#asideUhotw\"><i class=\"fa fa-caret-right\"></i> Deep dive: Understanding how \"one thing\" works</a>\n    </h3>\n  </div>\n\n  <div id=\"asideUhotw\" class=\"panel-collapse collapse progPanel dataPanel\">\n    <div class=\"panel-body\">\n\n<p>In current software systems, it is difficult to understand what a specific record or line of code in a software does, without knowing the layout of the entire database or codebase (respectively). Even the most seasoned programmers and data scientists balk at the idea of contributing to a database schema or software module that they are unfamiliar with. So there is little chance that an end-user, however knowledgeable in Computer Science, can contribute in a meaningful way to the application he/she uses. \n\n<p>ConceptJS makes is easy to understand how \"one thing\" (concept) works. A user can click 'Edit in IDE' in any page and go over the various related concepts in the viewer, finder and editor to get a feel for how the system works. We think that this is a good way to get a larger semi-technical community to participate in understanding and contributing to ConceptJS repositories. \n    </div>\n  </div>\n</div>\n\n<hr>\n\n<h3>Documenting lambda concepts</h4>\n\n<p>Lambda-concepts are not shown in the debugger because they can not be evaluated without knowing what the lambda-properties are bound to. However, you can create \"about\" pages for lambda-concepts. The following video shows how you can create an about-page for Programmer v2 using the built-in Wiki Page concept. \n\n<br>\n\n<p><figure style=\"text-align: center\">\n<iframe src=\"//fast.wistia.net/embed/iframe/jvwkg5puw6\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen mozallowfullscreen webkitallowfullscreen oallowfullscreen msallowfullscreen width=\"854\" height=\"460\"></iframe>\n</figure>\n\n<br>\n\n<hr>\n\n<h3>Links, scripts and <tt>meta</tt> directives</h3>\n\n<p>The content of the HTML page can include any HTML tags that go into the body of the page. These will be automatically embedded in a valid HTML page with <tt>html</tt>, <tt>head</tt> and <tt>body</tt> tags. \n\n<p>If you would like to include links to other CSS files and references to external Javascript libraries, you can do that by adding <tt>head</tt> and <tt>body</tt> tags to your HTML. \n\n<p>There are a couple of <tt>meta</tt> directives that you can use to control certain behaviors of the page. \n<ul>\n<li><b>cjsSaveMode = manual (default) | timer | script</b>: This directive indicates how the changes made to the page would like to saved. In the manual mode, enabled by default, the page prompts save and discard buttons at the top. In the timer mode, the page automatically saves every 10 seconds and when the page is closed. In the script mode, the page is itself responsible for saving and discarding changes. \n<li><b>cjsWarnOnExit = yes | no (default)</b>: This directive indicates whether the browser must post a warning when some changes haven't been saved. This option is available in the manual and script save modes. \n<li><b>cjsHeaderActive = yes | no (default)</b>: This directive brings up the header when set to yes or true. \n</ul>\n\n<p>Here is a snippet of a page that runs in timer save-mode with a header:\n\n<pre>\n&lt;head&gt;\n  &lt;meta name=\"cjsSaveMode\" content=\"script\"&gt;\n  &lt;meta name=\"cjsHeaderActive\" content=\"yes\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  ...\n&lt;/body&gt;\n</pre>\n\n<hr>\n\n<h3>Recap</h3>\n\n<ul class=\"recap\">\n<li>The core concept HTML Page can be used to create web pages that show up in the viewer. \n<li>The HTML page to which a concept has a direct or indirect is-a relationship is also referred to as its <i>human-readable form</i>. \n<li>The Mustache HTML Page concept can be used to render HTML using the mustache template system. \n<li>All concepts should ideally have a human-readable form that is understandable by the end-user. \n<li>Human-readable forms of concepts can capture the user interface and the documentation for the application. \n</ul>\n"
    }
  }, {
    "name" : "_unit_number",
    "expr" : {
      "num" : 6
    }
  }, {
    "name" : "unit",
    "expr" : {
      "concept" : "local://vKVuPLJ9zC82y44Ofqyf85/",
      "conceptName" : "Course Unit",
      "bindings" : {
        "name" : "_unit_name",
        "content" : "_unit_content",
        "number" : "_unit_number"
      }
    }
  } ],
  "isas" : [ {
    "var" : "unit"
  } ],
  "isLambda" : false
}