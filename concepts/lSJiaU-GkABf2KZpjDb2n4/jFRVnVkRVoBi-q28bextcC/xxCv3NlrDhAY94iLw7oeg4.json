{
  "uri" : "local://xxCv3NlrDhAY94iLw7oeg4/",
  "name" : "course_index.js",
  "category" : "js",
  "parent" : "local://jFRVnVkRVoBi-q28bextcC/",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "jsContent",
    "expr" : {
      "str" : "function hideShowIndex(element){\n    if ($(element).width() < 992) {\n        $(\".courseIndex\").hide();\n    }else{\n        $(\".courseIndex\").show();\n    }\n}\n\nfunction copyCourseReaders(anchorUri, indexModel){\n    var anchorReaderFolder = $cjs(anchorUri).children('.readers')[0];\n    var anchorReaders = anchorReaderFolder.children();\n    var allCourseUris = _.union($cjs('local://1a-XWYkuT9AhzaYyjQCQt1/').prop('cjsCourseUris').val(), $cjs('local://L8DrZ2C6lkAESqO6RpEo7B/').prop('userCourseUris').val());\n    var courseCT = allCourseUris.length;\n    _.each(allCourseUris, function(x){\n        var matchReader = _.find(anchorReaders, function(y){\n            return y.as('local://E40ZSmDZ3q89eafTdvRjvC/').prop('course').val().uri() == x;\n        });\n        \n        if (_.isUndefined(matchReader)){\n            var courseConc = $cjs(x);\n            $cjs.copyConcept({\n                puri: anchorReaderFolder.uri(),\n                curi: 'local://TyKIqG9e9OA9aa58w1uzKF/',\n                newName: courseConc.name() + \" Reader\",\n                done: function(newConc){\n                    newConc.prop('reader').prop('course', courseConc);\n                    newConc.prop('reader').prop('curUnitNumber', 0);\n                    $cjs.session.save();\n                    courseCT--;\n                    anchorReaders.push(newConc);\n                    if (courseCT == 0){\n                        indexModel.copyDone(anchorReaders);\n                    }\n                },\n                fail: function(jqXHR, textStatus, errorThrown){\n                    console.log(\"copy concept failed, status:\" + textStatus + \", error:\" + errorThrown + \", server response:\" + ((jqXHR.responseText)?jqXHR.responseText:\"\"));\n                }\n            });\n        }else{\n            courseCT--;\n        }\n    });\n    \n    if (courseCT == 0){\n        indexModel.copyDone(anchorReaders);\n    }\n}\n\nfunction UnitModel(searchResult, courseModel){\n    var self = this;\n    \n    this.number = ko.observable(searchResult._source.number);\n    this.name = ko.observable(searchResult._source.name);\n    \n    this.displayName = ko.computed(function(){\n        return this.number() + \" \" + this.name();\n    }, this);\n    \n    this.unitLinkClass = ko.observable(\"\");\n    \n    this.unitClick = function(data, event){\n        //$(\"#courseIndex a\").removeClass(\"currentIndex\");\n        //$(\"#courseIndex h5\").removeClass(\"currentIndex\");\n        if (courseModel != courseModel.indexModel.cCourseModel){\n            courseModel.indexModel.cCourseModel.courseLinkClass(\"\");\n            courseModel.indexModel.cCourseModel.currentElement.unitLinkClass(\"\");\n            courseModel.indexModel.cCourseModel.currentElement=null;\n            courseModel.courseLinkClass(\"currentIndex\");\n            courseModel.indexModel.cCourseModel = courseModel;\n        }\n        self.unitLinkClass(\"currentIndex\");\n        //$(event.currentTarget).parent().prev().addClass(\"currentIndex\");\n        if (courseModel.currentElement){\n            courseModel.currentElement.unitLinkClass(\"\");\n        }\n        courseModel.currentElement = self;\n        \n        courseModel.indexModel.refresh(courseModel.reader.uri(), courseModel);\n        courseModel.indexModel.currentCourse.gotoClick(self.number()-1);\n    }\n}\n\nfunction CourseModel(searchResult, reader, indexModel){\n    var self = this;\n    \n    this.number = ko.observable(searchResult._source.courseNumber);\n    this.name = ko.observable(searchResult._source.courseName);\n    \n    this.currentElement = null;\n    this.courseLinkClass = ko.observable(\"\");\n    \n    this.displayName = ko.computed(function(){\n        return this.number() + \" \" + this.name();\n    }, this);\n    \n    this.units = ko.observableArray();\n    \n    this.reader = reader;\n    this.indexModel = indexModel;\n    \n    this.goPrevious = function(){\n        if (self.currentElement){\n            //$(\"#courseIndex a\").removeClass(\"currentIndex\");\n            self.currentElement.unitLinkClass(\"\");\n            var preUnitIdx = _.indexOf(self.units(),self.currentElement)-1;\n            self.units()[preUnitIdx].unitLinkClass(\"currentIndex\");\n            self.currentElement = self.units()[preUnitIdx];\n        }\n    }\n    \n    this.goNext = function(){\n        if (self.currentElement){\n            //$(\"#courseIndex a\").removeClass(\"currentIndex\");\n            self.currentElement.unitLinkClass(\"\");\n            var nextUnitIdx = _.indexOf(self.units(),self.currentElement)+1;\n            self.units()[nextUnitIdx].unitLinkClass(\"currentIndex\");\n            self.currentElement = self.units()[nextUnitIdx];\n        }\n    }\n    \n    this.startover = function(){\n        if (self.currentElement){\n            //$(\"#courseIndex a\").removeClass(\"currentIndex\");\n            self.currentElement.unitLinkClass(\"\");\n            self.units()[0].unitLinkClass(\"currentIndex\");\n            self.currentElement = self.units()[0];\n        }\n    }\n    \n    this.courseClick = function(data, event){\n        $(event.currentTarget).next().toggle();\n    }\n}\n\nfunction CourseIndexModel(modelUri, anchorUri){\n    var self = this;\n    \n    var readerModelMap = {};\n    \n    var getReaderModel = function(uri, courseModel){\n        if(!_.has(readerModelMap, uri)){\n            readerModelMap[uri] = new CourseReaderModel($cjs.ko(uri+\"reader/\"), courseModel);\n        }\n        \n        return readerModelMap[uri]\n    }\n    \n    this.cvm = $cjs.ko(modelUri);\n    \n    this.cjsCourses = ko.observableArray();\n    this.userCourses = ko.observableArray();\n    this.currentCourse = null;\n    this.currentCourseSet = ko.observable(false);\n    this.cCourseModel = null;\n    \n    this.refresh = function(uri, courseModel){\n        var oldCourse = self.currentCourse;\n        self.currentCourseSet(false);\n        self.currentCourse = getReaderModel(uri, courseModel);\n        self.currentCourseSet(true);\n        \n        if (oldCourse != self.currentCourse){\n            if (ko.isWritableObservable(self.cvm.lastVisitCourse)){\n                self.cvm.lastVisitCourse(courseModel.reader.uri());\n                $cjs.session.save();\n            }\n        }\n    }\n    \n    this.copyDone = function(readers){\n        //var anchorReaderFolder = $cjs(anchorUri).children('.readers')[0];\n        //var readers = anchorReaderFolder.children();\n        \n        var getReader = function(courseNumber){\n            return _.find(readers, function(x){\n                return courseNumber == x.as('local://E40ZSmDZ3q89eafTdvRjvC/').prop('course').as('local://GWUiaDKhGKAJsKG1W9fqV0/').prop('number').val();\n            });\n        }\n        \n        $cjs.search({\n            uri: 'local://W8tRt7aonl93wKv3aGEkD8/',\n            queryJson: {\n                \"match_all\": { }\n            },\n            sortJson: [{\"field\" : \"isCJSCourse\", \"order\" : \"ASC\"},{\"field\" : \"courseNumber\", \"order\" : \"ASC\"},{\"field\" : \"number\", \"order\" : \"ASC\"}],\n            done : function(data){\n                //console.log(\"search data:\"+JSON.stringify(data));\n                if (data.hits.total > 0){ \n                    var courseModelMap = {};\n                    var currentCourseModel = null;\n                    var currentUnit = null;\n                    _.each(data.hits.hits, function(x){\n                        var courses = (x._source.isCJSCourse)?self.cjsCourses:self.userCourses;\n                        var courseModel = null;\n                        if (_.has(courseModelMap, x._source.courseNumber+\"_\"+x._source.isCJSCourse.toString())){\n                            courseModel = courseModelMap[x._source.courseNumber+\"_\"+x._source.isCJSCourse.toString()];\n                        }else{\n                            courseModel = new CourseModel(x, getReader(x._source.courseNumber), self);\n                            if (!currentCourseModel){\n                                currentCourseModel = courseModel;\n                            }\n                            courses.push(courseModel);\n                            courseModelMap[x._source.courseNumber+\"_\"+x._source.isCJSCourse.toString()] = courseModel;\n                            \n                            if (self.cvm.lastVisitCourse() && self.cvm.lastVisitCourse() == courseModel.reader.uri()){\n                                currentCourseModel = courseModel;\n                            }\n                        }\n                        \n                        var unit = new UnitModel(x, courseModel);\n                        if(!currentUnit){\n                            currentUnit = unit;\n                        }\n                        if ((currentCourseModel == courseModel) && ((currentCourseModel.reader.as('local://E40ZSmDZ3q89eafTdvRjvC/').prop('curUnitNumber').val() + 1) == unit.number())){\n                            currentUnit = unit;\n                        }\n                        courseModel.units.push(unit);\n                    });\n                    \n                    if (!self.currentCourse){\n                        self.refresh(currentCourseModel.reader.uri(), currentCourseModel);\n                    }\n                    \n                    currentCourseModel.courseLinkClass(\"currentIndex\");\n                    currentUnit.unitLinkClass(\"currentIndex\");\n                    currentCourseModel.currentElement = currentUnit;\n                    self.cCourseModel = currentCourseModel;\n                    \n                    hideShowIndex(window);\n                }\n            },\n            fail : function(jqXHR, textStatus, errorThrown){\n                console.log(\"search course units failed, status:\" + textStatus + \", error:\" + errorThrown + \", server response:\" + ((jqXHR.responseText)?jqXHR.responseText:\"\"));\n            }\n        });\n    }\n    \n    copyCourseReaders(anchorUri, self);\n}",
      "strEditMode" : "js"
    }
  }, {
    "name" : "_javascriptResource_fileName",
    "expr" : {
      "str" : "course_index.js",
      "strEditMode" : ""
    }
  }, {
    "name" : "javascriptResource",
    "expr" : {
      "concept" : "/common/core/nK_9eZMUDp8T6qqr7t5k67/",
      "bindings" : {
        "js" : "jsContent",
        "fileName" : "_javascriptResource_fileName"
      }
    }
  } ],
  "isas" : [ {
    "var" : "javascriptResource"
  } ]
}